//Class Grabbing_A_Ledge : Inventory	{Default	{inventory.maxamount 1;}	}
Class DeathToken : Inventory	{Default	{inventory.maxamount 1;}	}

Class HellCrusher : BuildPlayer
{
/*
	//Movement General
	bool	Pain;
	double	ViewAngleDelta;
	float	ActualSpeed;
	float	MaxAirSpeed;
	float 	MaxGroundSpeed;
	float	MoveFactor;
	int		AnimateJump;
	int		ForceVelocity;
	int		MoveType;
	int		OldFloorZ;
	playerinfo ZMPlayer;
	vector2 OldVelXY;
	vector3	Acceleration;

	//Jumping
	bool 	BlockJump;
	bool	Jumped;
	float	FloorAngle;
	int		DoubleJumpCooler;
	int		JumpSoundCooler;
	
	//Double Jump
	bool	BlockDoubleJump;
	bool	CanDoubleJump;

	//Ledge Grabbing
	bool	LedgeGrabbed;
	float	LedgeAngle;
	int		LedgeHeight;
	
	int		LedgeTime;
	
	weapon	ReselectWeapon;
	*/
	bool	LedgeCheck;
	
	int		LedgeHeightMax;
	int		LedgeHeightMin;
	float	FrameTime;
	double	velx;
	double	vely;
	double	velz;
	
	int musicVolume;

	Default{
	DamageFactor "PlayerExplosive", 0;
	DamageFactor "PlayerRocket", 0.2;
	DamageFactor "PlayerGauss", 0;
	
	Player.ForwardMove 3,1.5;
	Player.Sidemove 3,1.5;
	Player.AirCapacity 0;
	
	Player.viewheight 55;
	Player.UseRange 100;
	Player.attackzoffset 25;
	Scale 1.1;
	Height 56;	//70;
	Radius 16; //14
	Mass 2000;
	
	Player.SoundClass "HellCrusherGuy";
	
	Player.CrouchSprite "PLYC";
	
	Player.Portrait "PCICA0";
	Player.DisplayName "Executioner";
  
	Player.StartItem "Quick_Chainsaw_Thinker";
	Player.StartItem "Quick_Melee_Thinker";
	Player.StartItem "HC_kick";
	Player.StartItem "Ice_Bomb";
	Player.StartItem "Daul_Grenade";
	Player.StartItem "Flame_Belch";
	Player.StartItem "DEDashJump";
	
	Player.StartItem "Executioner";
	//Player.StartItem "Melee";
	Player.StartItem "HC_Magazine", 50;
	Player.StartItem "ChainsawFuel", 1;
	
	Player.WeaponSlot 1, "ThermalDecimator"; //"Melee", 
	Player.WeaponSlot 2, "Executioner","MammothTusk";
	Player.WeaponSlot 3, "IronbarkBlunderbuss", "DevilsCry";
	Player.WeaponSlot 4, "FearsEnd", "ApocalypseKiller";
	Player.WeaponSlot 5, "DeimosHarbinger";
	Player.WeaponSlot 6, "PlasmaticLance","HeliosCannon";
	Player.WeaponSlot 7, "HideousAnnihilator";
	}
  
  	//////////////////////////////////////
	// Ledge Grab						//
	//////////////////////////////////////
	
	Override void HandleMovement() {
        if(LedgeCheck)
        {
            LedgeReach();
        }
        if(LedgeGrabbed)
        {
            LedgeGrab();
        }
        LedgeGrabInitiator();
        super.HandleMovement();
    }
	
	void LedgeGrabInitiator()
	{
		ZMPlayer = self.player;
		
		//Already ledge grabbing, no clipping, moving away from where you are looking, ceiling already too low for sure
		if((pos.z <= floorz) || LedgeCheck || LedgeGrabbed || (ZMPlayer.Cheats & CF_NOCLIP2) || Vel.XY dot AngleToVector(Angle) <= 0 || CeilingZ <= Pos.Z + Height * 1.6f) { return; } //1.6f
		
		//============================================
		//Find ledge (if any)						//
		//============================================
		
		FLineTraceData LedgeTrace;
		Float TraceDistance = sqrt(2) * Radius + 1; //account for the fact that Doom's hitboxes are square
		LineTrace(Angle, TraceDistance, 0, TRF_BLOCKSELF|TRF_THRUACTORS, Height * 1.2f, data: LedgeTrace); //1.2f
		Vector3 HitPos = LedgeTrace.HitLocation;
		
		Int LedgeCandidate;
		if(LedgeTrace.HitType == TRACE_HitWall) //hit wall scenario
		{
			if(LedgeTrace.Hit3DFloor != NULL) //3D floor
			{
				LedgeCandidate = LedgeTrace.Hit3DFloor.Top.ZAtPoint(HitPos.XY);
			}
			else //regular wall
			{
				Line HitLine = LedgeTrace.HitLine;
				if(HitLine.FrontSector != NULL && HitLine.FrontSector != CurSector)
					LedgeCandidate = HitLine.FrontSector.FloorPlane.ZatPoint(HitPos.XY);
				else if(HitLine.BackSector != NULL && HitLine.BackSector != CurSector)
					LedgeCandidate = HitLine.BackSector.FloorPlane.ZatPoint(HitPos.XY);
			}
		}
		else if(LedgeTrace.HitSector != CurSector)//tracer stopper mid air in a sector that is not the one where player currently is
		{
			LedgeCandidate = LedgeTrace.HitSector.NextLowestFloorAt(HitPos.X, HitPos.Y, HitPos.Z, FFCF_3DRESTRICT, 0);
		}
		else
		{
			return;
		}
		
		//Check if the candidate ledge can suffice
		if(LedgeCandidate > Pos.Z + 70/*Height*/ * 0.6f && LedgeCandidate <= Pos.Z + 70/*Height*/ * 1.6f) ///0.6f , 1.2f
		{
			Vector3 OrigPos = Pos;
			SetXYZ((Pos.XY, LedgeCandidate));
			if(!CheckMove(Pos.XY + 5.f * AngleToVector(Angle))) //not enough space, cancel everything :(
			{
				SetXYZ(OrigPos);
				return;
			}
			SetXYZ(OrigPos);
			LedgeHeight = LedgeCandidate;
			LedgeHeightMin = (LedgeHeight - 70/*Height*/ * 0.97f); 	//0.97f
			LedgeHeightMax = (LedgeHeight - 70/*Height*/ * 0.751f); 	//0.751f
		}
		else
		{
			return; //too high/low
		}
		
		velz = 16; //8
		LedgeCheck = True;
		/*
		if(vel.length() < 5)
		{
			GiveInventory("Grabbing_A_Ledge", 1);
		}
		*/
		if(pos.z >= (LedgeHeightMin+20)) //20
		{
			player.SetPSprite(PSP_WEAPON,player.ReadyWeapon.FindState("FinishClimb"));
			
			A_StopSound(CHAN_WEAPON);
			A_StartSound("ledgeclimb");
			LedgeAngle = Angle;
			LedgeCheck = False;
			LedgeGrabbed = True;
			return;
		}
		{
			player.SetPSprite(PSP_WEAPON,player.ReadyWeapon.FindState("LedgeClimb"));
		}
	}
	void LedgeReach()
	{
		LedgeTime++;
		if(LedgeTime >= 30)
		{
			SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
			LedgeGrabbed = LedgeTime = LedgeHeight = LedgeHeightMin = LedgeHeightMax = FrameTime = 0;
		}
	}
	
	void LedgeGrab()
	{
		if(Pos.Z >= LedgeHeight || !Vel.Length() || LedgeTime >= 35)
		{
			//End Ledge Grab
			LedgeCheck = False;
			SetOrigin((Pos.X, Pos.Y, LedgeHeight), True);
			SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
			
			//Only if ledge grab was successful
			if(LedgeTime >= 35) { return; }
			LedgeGrabbed = LedgeTime = LedgeHeight = LedgeHeightMin = LedgeHeightMax = FrameTime = 0;
			Vel = Vel.Length() ? (5.f * AngleToVector(LedgeAngle), -3) : (0, 0, 0); //push player forward and downward
			A_StartSound("*land", CHAN_BODY);
		}
		else
		{
			Vel = Vel.Length() ? (0, 0, 8) : (0, 0, 0);
		}
		
		//Fail safe to unlock player movement if something goes wrong
		LedgeTime++;
		if(LedgeTime >= 35)
		{
			SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
			LedgeGrabbed = LedgeTime = LedgeHeight = LedgeHeightMin = LedgeHeightMax = FrameTime = 0;
		}
		
		//Sprite animation
		PlayIdle();
	}
	
	  States
	{
	Spawn:
		PLAY A -1;
		Loop;
	See:
		PLAY ABCD 4;
		Loop;
	Missile:
		PLAY E 12;
		Goto Spawn;
	Melee:
		PLAY F 2 BRIGHT;
		Goto Missile;
	Pain:
		PLAY G 4; //4
		PLAY G 4 A_Pain; //4
		Goto Spawn;
		
		
		
	Death:
		TNT1 A 0 A_Overlay(66,"FirstPersonDeath1");
	Death1:
		PLAY H 10;
		PLAY I 10 A_PlayerScream;
		PLAY J 10 A_NoBlocking;
		PLAY KLM 10;
		PLAY N -1;
		Stop;
	XDeath:
		TNT1 A 0 A_Overlay(55,"FirstPersonDeath1");
	XDeath1:
		PLAY O 5;
		PLAY P 5; //A_XScream;
		PLAY Q 5 A_NoBlocking;
		PLAY RSTUV 5;
		PLAY W -1;
		Stop;
		
	FirstPersonDeath1:
		TNT1 A 0 A_GiveInventory("DeathToken", 1);
		TNT1 A 0 {invoker.musicVolume == 0;}
		TNT1 A 0 {SetMusicVolume(musicVolume);}
		TNT1 A 0 A_StartSound("BigBloodSplash",CHAN_VOICE,0,1);
		TNT1 A 0 A_Overlay(54,"DeathLayer2");
		TNT1 A 80;
		TNT1 A 0 A_StartSound("PlayerDeath/CompanyScreamLoop",CHAN_5,CHANF_LOOP,1);
		TNT1 A 0 A_StartSound("PlayerDeath/CompanyScreamLoop",CHAN_6,CHANF_LOOP,1);
		TNT1 A 0 A_StartSound("PlayerDeath/CompanyScreamLoop",CHAN_7,CHANF_LOOP,1);
		TNT1 A 0 A_StartSound("PlayerDeath/CompanyScream",CHAN_AUTO,0,1);
		TNT1 A 0 A_Overlay(51,"DeathLayer1");
		TNT1 A 10;
		TNT1 A 0 A_StopSound(CHAN_7);
		TNT1 A 30;
		TNT1 A 0 A_Overlay(52,"DeathLayer3");
		TNT1 A 40;
		TNT1 A 0 A_Overlay(53,"DeathLayer4");
		TNT1 A 20;
		TNT1 A -1;
		Stop;
		
	DeathLayer1:
		TNT1 A 0 A_QuakeEx(3,3,3,7,0,100,"*");
		TNT1 A 0 A_OverlayPivotAlign(51,PSPA_CENTER,PSPA_CENTER);
		DHM1 B 1 BRIGHT {A_OverlayOffset(51,random(-5,5),random(-4,4)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 C 1 BRIGHT {A_OverlayOffset(51,random(-5,5),random(-4,4)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 B 1 BRIGHT {A_OverlayOffset(51,random(-4,4),random(-5,5)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 B 1 BRIGHT {A_OverlayOffset(51,random(-5,5),random(-5,5)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 C 1 BRIGHT {A_OverlayOffset(51,random(-4,4),random(-5,5)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 B 1 BRIGHT {A_OverlayOffset(51,random(-4,4),random(-4,4)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		TNT1 A 0 A_QuakeEx(1,1,1,20,0,100,"*");
		DHM1 B 1 BRIGHT {A_OverlayOffset(51,random(-4,4),random(-4,4)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 B 1 BRIGHT {A_OverlayOffset(51,random(-4,4),random(-4,4)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 C 1 BRIGHT {A_OverlayOffset(51,random(-5,5),random(-4,4)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 B 1 BRIGHT {A_OverlayOffset(51,random(-4,4),random(-5,5)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 C 1 BRIGHT {A_OverlayOffset(51,random(-4,4),random(-4,4)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 B 1 BRIGHT {A_OverlayOffset(51,random(-4,4),random(-4,4)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 B 1 BRIGHT {A_OverlayOffset(51,random(-5,5),random(-4,4)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 C 1 BRIGHT {A_OverlayOffset(51,random(-5,5),random(-5,5)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 C 1 BRIGHT {A_OverlayOffset(51,random(-5,5),random(-5,5)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 B 1 BRIGHT {A_OverlayOffset(51,random(-4,4),random(-5,5)); A_OverlayScale(51,frandom(0.8,1.2),frandom(0.8,1.2)); A_OverlayRotate(51,random(-7,7));}
		DHM1 C 1 BRIGHT {A_OverlayOffset(51,random(-3,3),random(-2,2)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-3,3));}
		DHM1 C 1 BRIGHT {A_OverlayOffset(51,random(-3,3),random(-2,2)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-4,4));}
		DHM1 D 1 BRIGHT {A_OverlayOffset(51,random(-2,2),random(-2,2)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-3,3));}
		DHM1 C 1 BRIGHT {A_OverlayOffset(51,random(-3,3),random(-2,2)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-3,3));}
		DHM1 D 1 BRIGHT {A_OverlayOffset(51,random(-3,3),random(-2,2)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-3,3));}
		DHM1 C 1 BRIGHT {A_OverlayOffset(51,random(-2,2),random(-2,2)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-4,4));}
		DHM1 C 1 BRIGHT {A_OverlayOffset(51,random(-2,2),random(-3,3)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-4,4));}
		DHM1 D 1 BRIGHT {A_OverlayOffset(51,random(-2,2),random(-3,3)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-4,4));}
		DHM1 C 1 BRIGHT {A_OverlayOffset(51,random(-2,2),random(-3,3)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-4,4));}
	DeathLayer1part2:
		TNT1 A 0 A_QuakeEx(1,1,1,11,0,100,"*");
		DHM1 D 1 BRIGHT {A_OverlayOffset(51,random(-2,2),random(-3,3)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-4,4));}
		DHM1 D 1 BRIGHT {A_OverlayOffset(51,random(-2,2),random(-2,2)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-4,4));}
		DHM1 D 1 BRIGHT {A_OverlayOffset(51,random(-2,2),random(-2,2)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-3,3));}
		DHM1 D 1 BRIGHT {A_OverlayOffset(51,random(-2,2),random(-2,2)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-3,3));}
		DHM1 D 1 BRIGHT {A_OverlayOffset(51,random(-2,2),random(-2,2)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-3,3));}
		DHM1 D 1 BRIGHT {A_OverlayOffset(51,random(-2,2),random(-2,2)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-3,3));}
		DHM1 D 1 BRIGHT {A_OverlayOffset(51,random(-3,3),random(-3,3)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-3,3));}
		DHM1 D 1 BRIGHT {A_OverlayOffset(51,random(-3,3),random(-3,3)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-3,3));}
		DHM1 D 1 BRIGHT {A_OverlayOffset(51,random(-3,3),random(-3,3)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-3,3));}
		DHM1 D 1 BRIGHT {A_OverlayOffset(51,random(-2,2),random(-2,2)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-4,4));}
		DHM1 D 1 BRIGHT {A_OverlayOffset(51,random(-2,2),random(-2,2)); A_OverlayScale(51,frandom(0.8,1.1),frandom(0.8,1.1)); A_OverlayRotate(51,random(-4,4));}
		Loop;
		
	DeathLayer2:
		DHM1 E  -1;
		//TNT1 A 0 A_StartSound("BigBloodSplash",CHAN_VOICE,0,.7);
		//DHM1 F -1;
		Stop;
		
	DeathLayer3:
		TNT1 A 0 A_OverlayPivotAlign(52,PSPA_CENTER,PSPA_CENTER);
		DHM1 G 1 BRIGHT {A_OverlayOffset(52,random(-2,2),random(-2,2)); A_OverlayScale(52,frandom(0.7,0.9),frandom(0.7,0.9)); A_OverlayRotate(52,random(-2,2));}
		Loop;
		
	DeathLayer4:
		TNT1 A 0 A_OverlayPivotAlign(53,PSPA_CENTER,PSPA_CENTER);
		DHM1 H 1 BRIGHT {A_OverlayOffset(53,random(-2,2),random(-2,2)); A_OverlayScale(53,frandom(0.7,0.9),frandom(0.7,0.9)); A_OverlayRotate(53,random(-2,2));}
		Loop;
	
	Raise:
		TNT1 A 0;
		TNT1 A 0 A_ClearOverlays(51,54);
		PLAY M 10;
		PLAY L 10;
		PLAY K 10;
		PLAY J 10;
		PLAY I 10;
		PLAY H 10;
		Goto See;
	}
}