Class Quick_Melee_Token : Inventory	{	Default	{	inventory.maxamount 1;	}	}
Class Quick_Melee_Thinker : CustomInventory {
	States
	{
	Use:
		TNT1 A 0;
		TNT1 A 0 A_GiveInventory("Quick_Melee_Token",1);
		TNT1 A 1;
		TNT1 A 0;
		Fail;
	}
}

Class Quick_Chainsaw_Token : Inventory	{	Default	{	inventory.maxamount 1;	}	}
Class Quick_Chainsaw_Thinker : CustomInventory {
	States
	{
	Use:
		TNT1 A 0;
		TNT1 A 0 A_GiveInventory("Quick_Melee_Token",1);
		TNT1 A 0 A_GiveInventory("Quick_Chainsaw_Token",1);
		TNT1 A 1;
		TNT1 A 0;
		Fail;
	}
}

Class GKProtection : PowerProtection { Default { DamageFactor "Normal", 0; Powerup.Duration 0x7fffffff; } }
Class GKProtection2 : PowerProtection { Default { DamageFactor "Normal", 0.25; Powerup.Duration 52; } }

Class HellCrusherW : Weapon
{
	bool targetIsGrounded() {
	//To check if a target is on ground:
	return target && target.pos.z <= target.floorZ;
	}
	
	override void DoEffect() //creation of a function
    {
        super.DoEffect(); //make an effect at top
        let player = owner.player; //define variable "player" and set it to the owner of the item
        if (player && player.readyweapon) //if you are player and have weapon
        {
            player.WeaponState |= WF_WEAPONBOBBING; //create weapon bob
        }
    }

	Default 
	{
		Weapon.BobStyle "InverseSmooth";
		Weapon.BobSpeed 2.5;
		Weapon.BobRangeX 0.3;//1.0;
		Weapon.BobRangeY 0.3;//1.0;
		
		//Weapon.WeaponScaleY 1;
		//Weapon.WeaponScaleX 1;
		//+WEAPON.NOAUTOFIRE;
	}
	
	Int SawDelay;
	float amountCfuel;
	Actor GKill;

	action void LedgeReach(float HeightDecrease)
	{
		let plr = HellCrusher(self);
		plr.LedgeHeightMax = (plr.LedgeHeight - 70/*Height*/ * HeightDecrease * 1.0f); //SPEED
		A_Stop();
		SetOrigin((Pos.X, Pos.Y, plr.LedgeHeightMax), True);
	}
	
	
	States
	{
	
	
	
	Ready3:
		TNT1 A 1 A_Jump(255, "Ready3");
		Loop;	
	
	
	
	QuickMeleeStart:
		TNT1 A 0 {A_OverlayRotate(0,0);		A_WeaponOffset(0,32);}
		TNT1 A 0 A_TakeInventory("Quick_Melee_Token",1);
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("BloodPunchCharges",1,"BloodPunchLeft");
		
	LeftBlade:
		TNT1 A 0 A_StartSound("Crucible/Return",CHAN_6,0,.7);
		TNT1 A 0 A_StartSound("PunchSwing",CHAN_5,0,.6);
		TNT1 A 0 A_JumpIf(CountInv("PowerStrength") == 0, 2);
		TNT1 A 0 A_StartSound("BerzerkSwing",0,0,.7);
		
		TNT1 A 0 {A_SetAngle(angle+0.3,SPF_INTERPOLATE); A_SetPitch(pitch-0.2,SPF_INTERPOLATE);}
		QKML A 1;
		TNT1 A 0 {A_SetAngle(angle+0.5,SPF_INTERPOLATE); A_SetPitch(pitch-0.4,SPF_INTERPOLATE);}
		QKML B 1;
		
		TNT1 A 0 A_JumpIfInventory("PowerStrength", 1, "BerserkedLeftBlade");
	Normal:
		TNT1 A 0 A_FireProjectile("BladeProjectile",0,false);
		TNT1 A 0 A_CustomPunch(0,FALSE,0, "BladePuffRight", 100,0,0,"ArmorBonus","*");
		Goto FireEndLeftBlade;
	BerserkedLeftBlade:
		TNT1 A 0 A_FireProjectile("BladeProjectileBerserk",0,false);
		TNT1 A 0 A_CustomPunch(0,FALSE,0, "BladePuffRight", 100,0,0,"ArmorBonus","*");
	FireEndLeftBlade:
	
		TNT1 A 0 {A_SetAngle(angle+0.1,SPF_INTERPOLATE); A_SetPitch(pitch-0.1,SPF_INTERPOLATE);}
		QKML C 1;
		TNT1 A 0 {A_SetAngle(angle-0.6,SPF_INTERPOLATE); A_SetPitch(pitch+0.5,SPF_INTERPOLATE);}
		QKML D 1;
		TNT1 A 0 {A_SetAngle(angle-0.3,SPF_INTERPOLATE); A_SetPitch(pitch+0.2,SPF_INTERPOLATE);}
		QKML E 1;
		QKML F 1;
		QKML G 1;
		QKML H 1;
		
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"RightQuickMelee");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"RightQuickMelee");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"RightQuickMelee");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"RightQuickMelee");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"RightQuickMelee");
		TNT1 A 1;
		Goto Ready3;
		
		
		
		/*
		
		
	RightBlade:
		TNT1 A 0 A_StartSound("Crucible/Return",CHAN_6,0,.7);
		TNT1 A 0 A_StartSound("PunchSwing",CHAN_5,0,.6);
		TNT1 A 0 A_JumpIf(CountInv("PowerStrength") == 0, 2);
		TNT1 A 0 A_StartSound("BerzerkSwing",0,0,.7);
		
		TNT1 A 0 {A_SetAngle(angle-0.3,SPF_INTERPOLATE); A_SetPitch(pitch-0.2,SPF_INTERPOLATE);}
		QKMR A 1;
		TNT1 A 0 {A_SetAngle(angle-0.5,SPF_INTERPOLATE); A_SetPitch(pitch-0.4,SPF_INTERPOLATE);}
		QKMR B 1;
		
		TNT1 A 0 A_JumpIfInventory("PowerStrength", 1, "BerserkedRightBlade");
	Normal:
		TNT1 A 0 A_FireProjectile("BladeProjectile",0,false);
		TNT1 A 0 A_CustomPunch(0,FALSE,0, "BladePuffL", 100,0,0,"ArmorBonus","*");
		Goto FireEndRightBlade;
	BerserkedRightBlade:
		TNT1 A 0 A_FireProjectile("BladeProjectileBerserk",0,false);
		TNT1 A 0 A_CustomPunch(0,FALSE,0, "BladePuffL", 100,0,0,"ArmorBonus","*");
	FireEndRightBlade:
	
		TNT1 A 0 {A_SetAngle(angle-0.1,SPF_INTERPOLATE); A_SetPitch(pitch-0.1,SPF_INTERPOLATE);}
		QKMR C 1;
		TNT1 A 0 {A_SetAngle(angle+0.6,SPF_INTERPOLATE); A_SetPitch(pitch+0.5,SPF_INTERPOLATE);}
		QKMR D 1;
		TNT1 A 0 {A_SetAngle(angle+0.3,SPF_INTERPOLATE); A_SetPitch(pitch+0.2,SPF_INTERPOLATE);}
		QKMR E 1;
		QKMR F 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftBlade");
		QKMR G 1;
		//QKMR H 1;
	
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftBlade");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftBlade");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftBlade");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftBlade");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftBlade");
		TNT1 A 1;
		Goto Ready3;
	
	
	
	*/
	
	
	
	
	RightQuickMelee:
		TNT1 A 0 A_TakeInventory("Quick_Melee_Token",1);
		TNT1 A 0 A_JumpIfInventory("BloodPunchCharges",1,"BloodPunchRight");
		//TNT1 A 0 A_JumpIf(CountInv("PowerStrength") <= 1, "RightBlade");
		//TNT1 A 0 A_JumpIfInventory("PowerStrength",1,"RightBlade");
		
		TNT1 A 0 {A_SetAngle(angle+0.2,SPF_INTERPOLATE); A_SetPitch(pitch-0.1,SPF_INTERPOLATE);}
		QAPR A 1;
		TNT1 A 0 {A_SetAngle(angle+0.3,SPF_INTERPOLATE); A_SetPitch(pitch-0.3,SPF_INTERPOLATE);}
		QAPR B 1;
		
		TNT1 A 0 A_StartSound("PunchSwing",CHAN_5,0,.6);
		TNT1 A 0 A_JumpIf(CountInv("PowerStrength") == 0, 2);
		TNT1 A 0 A_StartSound("BerzerkSwing",0,0,.7);
		
		TNT1 A 0 A_JumpIfInventory("PowerStrength", 1, "BerserkedRightQuickMelee");
	Normal:
		TNT1 A 0 A_FireProjectile("FaceSmasherPunch",0,false);
		TNT1 A 0 A_CustomPunch(0,FALSE,0, "FaceSmasherPuffR", 100,0,0,"ArmorBonus","*");
		Goto FireEndRightQuickMelee;
	BerserkedRightQuickMelee:
		TNT1 A 0 A_FireProjectile("FaceSmasherPunchBerserk",0,false);
		TNT1 A 0 A_CustomPunch(0,FALSE,0, "FaceSmasherPuffRB", 100,0,0,"ArmorBonus","*");
	FireEndRightQuickMelee:
		
		TNT1 A 0 {A_SetAngle(angle+0.1,SPF_INTERPOLATE); A_SetPitch(pitch-0.1,SPF_INTERPOLATE);}
		QAPR C 1;
		TNT1 A 0 {A_SetAngle(angle-0.6,SPF_INTERPOLATE); A_SetPitch(pitch+0.5,SPF_INTERPOLATE);}
		QAPR D 1;
		
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftQuickMelee");
		QAPR E 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftQuickMelee");
		QAPR F 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftQuickMelee");
		QAPR G 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftQuickMelee");
		QAPR H 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftQuickMelee");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftQuickMelee");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftQuickMelee");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftQuickMelee");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"LeftQuickMelee");
		TNT1 A 1;
		
		Goto Ready3;
		
		
		
	LeftQuickMelee:
		TNT1 A 0 A_TakeInventory("Quick_Melee_Token",1);
		
		TNT1 A 0 A_JumpIfInventory("BloodPunchCharges",1,"BloodPunchLeft");
		
		TNT1 A 0 {A_SetAngle(angle-0.2,SPF_INTERPOLATE); A_SetPitch(pitch-0.1,SPF_INTERPOLATE);}
		QAPL A 1;
		TNT1 A 0 {A_SetAngle(angle-0.3,SPF_INTERPOLATE); A_SetPitch(pitch-0.3,SPF_INTERPOLATE);}
		QAPL B 1;
		
		TNT1 A 0 A_StartSound("PunchSwing",CHAN_5,0,.6);
		TNT1 A 0 A_JumpIf(CountInv("PowerStrength") == 0, 2);
		TNT1 A 0 A_StartSound("BerzerkSwing",0,0,.7);
		
		TNT1 A 0 A_JumpIfInventory("PowerStrength", 1, "BerserkedLeftQuickMelee");
	Normal:
		TNT1 A 0 A_FireProjectile("FaceSmasherPunch",0,false);
		TNT1 A 0 A_CustomPunch(0,FALSE,0, "FaceSmasherPuffL", 100,0,0,"ArmorBonus","*");
		Goto FireEndLeftQuickMelee;
	BerserkedLeftQuickMelee:
		TNT1 A 0 A_FireProjectile("FaceSmasherPunchBerserk",0,false);
		TNT1 A 0 A_CustomPunch(0,FALSE,0, "FaceSmasherPuffLB", 100,0,0,"ArmorBonus","*");
	FireEndLeftQuickMelee:
		
		TNT1 A 0 {A_SetAngle(angle-0.1,SPF_INTERPOLATE); A_SetPitch(pitch-0.1,SPF_INTERPOLATE);}
		QAPL C 1;
		TNT1 A 0 {A_SetAngle(angle+0.6,SPF_INTERPOLATE); A_SetPitch(pitch+0.5,SPF_INTERPOLATE);}
		QAPL D 1;
		
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"RightQuickMelee");
		QAPL E 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"RightQuickMelee");
		QAPL F 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"RightQuickMelee");
		QAPL G 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"RightQuickMelee");
		QAPL H 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"RightQuickMelee");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"RightQuickMelee");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"RightQuickMelee");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"RightQuickMelee");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"RightQuickMelee");
		TNT1 A 1;
		Goto Ready3;
	
	
	
		
		
	ChainsawSwing:
		TNT1 A 0 A_TakeInventory("Quick_Chainsaw_Token",1);
		TNT1 A 0 A_TakeInventory("Quick_Melee_Token",1);
		
		TNT1 A 0 A_JumpIf(CountInv("ChainsawFuel") == 0, "ChainsawNoFuel");
		
		TNT1 A 0 A_StartSound("Chainsaw/Swing",CHAN_6,0,.5);
		
		TNT1 A 0 {A_OverlayRotate(0,0);										A_OverlayRotate(0,0);							A_WeaponOffset(0,32);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,-26);							A_WeaponOffset(200,45);}
		XCSN I 1 {A_SetAngle(angle+0.1,SPF_INTERPOLATE);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,-4,WOF_INTERPOLATE);			A_WeaponOffset(80,38,WOF_INTERPOLATE);}
		XCSN J 1 {A_SetAngle(angle+0.3,SPF_INTERPOLATE); A_SetPitch(pitch+0.1);}
		
		
		TNT1 A 0 
		{
			FTranslatedLineTarget t;
			
			LineAttack(Angle,100,Pitch,0,"Chainsaw","none",LAF_NORANDOMPUFFZ,t);
			
			If (t.linetarget)
			{
				invoker.amountCfuel = t.linetarget.health * 0.01;
				If(invoker.amountCfuel <= 1)
				{
					invoker.amountCfuel = 1;
				}
			}
			
			If(t.linetarget && CountInv("ChainsawFuel") <= 0 && t.linetarget.bisMONSTER == FALSE) //If(t.linetarget && t.linetarget.health>=450)
			{
			Return ResolveState("ChainsawFail");
			}
			If(t.linetarget && CountInv("ChainsawFuel") >= invoker.amountCfuel && t.linetarget.bisMONSTER == TRUE) //If(t.linetarget && t.linetarget.health<=450)
			{
				A_GiveInventory("GKProtection");
				TakeInventory("ChainsawFuel",invoker.amountCfuel);
				
				bShootable=False;
				A_Stop();
				Invoker.GKill=t.linetarget;
				If(Invoker.GKill.FindState("Pain"))
				Invoker.GKill.SetStateLabel("Pain");
				Invoker.GKill.Tics=-1;
				Invoker.GKill.bShootable=Invoker.GKill.bSolid=False;
				Invoker.GKill.bNoGravity=True;
				Invoker.GKill.Vel*=0;
				//Invoker.GKill.A_ChangeFlag("NOCLIP",true);
				Invoker.GKill.bNOCLIP = true;
				
				If(Invoker.GKill.CountInv("IceBombFreezeme") >= 1)
				{Invoker.GKill.A_GiveInventory("IceBombFreezeme");}
				
				SetPlayerProperty(0,1,4);
				SetPlayerProperty(0,1,3);
				
				//bNoGravity=True;
				Let D=DEDashJump(FindInventory("DEDashJump"));
				If(D) D.DashSpeed=0;
				Vel*=0;
				Actor Travelingo=Spawn("GKTravelThingy",Pos+(0,0,3),ALLOW_REPLACE);
				If(Travelingo)
				{
					Invoker.GKill.A_Face(Self);
					Travelingo.Warp(Invoker.GKill,Invoker.GKill.Radius+Radius,0,0,WARPF_NOCHECKPOSITION);
					Vector2 Dir=LMBDLib.FaceVector(Travelingo.Pos,Travelingo.Pos);
					Travelingo.A_SetSize(Radius,Height);
					Travelingo.specialf1=deltaangle(Angle,Dir.X); //Dir.X
					Travelingo.specialf2=deltaangle(Pitch,0);
					Travelingo.Vel3DFromAngle(Distance3D(Travelingo)/6.,Dir.X,Dir.Y); //Dir.X,Dir.Y
					Travelingo.Target=Self;
					Travelingo.Warp(Self,0,0,0);
					Travelingo.Tracer=Invoker.GKill;
					Invoker.GKill.Angle+=180;
					Invoker.SawDelay=35*3;
				}
				Return ResolveState("ChainsawSuccess");
			}
			Return ResolveState(Null);
		}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,30,WOF_INTERPOLATE);			A_WeaponOffset(70,45,WOF_INTERPOLATE);}
		XCSN I 1 {A_SetAngle(angle+0.5,SPF_INTERPOLATE); A_SetPitch(pitch+0.4);}
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,36,WOF_INTERPOLATE);			A_WeaponOffset(50,65,WOF_INTERPOLATE);}
		XCSN J 1 {A_SetAngle(angle+0.3,SPF_INTERPOLATE); A_SetPitch(pitch+0.2);}
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,47,WOF_INTERPOLATE);			A_WeaponOffset(25,85,WOF_INTERPOLATE);}
		XCSN I 1 {A_SetAngle(angle+0.2,SPF_INTERPOLATE); A_SetPitch(pitch+0.2);}
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,53,WOF_INTERPOLATE);			A_WeaponOffset(10,90,WOF_INTERPOLATE);}
		XCSN J 1 {A_SetAngle(angle+0.1,SPF_INTERPOLATE); A_SetPitch(pitch+0.2);}
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,80,WOF_INTERPOLATE);			A_WeaponOffset(5,120,WOF_INTERPOLATE);}
		XCSN I 1 {A_SetAngle(angle+0.2,SPF_INTERPOLATE); A_SetPitch(pitch+0.1);}
		
		//TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawUpSwing");
		TNT1 A 1 {A_SetAngle(angle-0.3,SPF_INTERPOLATE); A_SetPitch(pitch-0.1);}
		//TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawUpSwing");
		TNT1 A 1 {A_SetAngle(angle-0.3,SPF_INTERPOLATE); A_SetPitch(pitch-0.1);}
		//TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawUpSwing");
		TNT1 A 1 {A_SetAngle(angle-0.2,SPF_INTERPOLATE); A_SetPitch(pitch-0.1);}
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawUpSwing");
		TNT1 A 1 {A_SetAngle(angle-0.1,SPF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawUpSwing");
		TNT1 A 1 {A_SetAngle(angle-0.1,SPF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawUpSwing");
		
		Goto Ready3;
		
		
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,80,WOF_INTERPOLATE);			A_WeaponOffset(5,120,WOF_INTERPOLATE);}
		XCSN I 1 {A_SetAngle(angle+0.2,SPF_INTERPOLATE); A_SetPitch(pitch+0.1);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,53,WOF_INTERPOLATE);			A_WeaponOffset(10,90,WOF_INTERPOLATE);}
		XCSN J 1 {A_SetAngle(angle+0.1,SPF_INTERPOLATE); A_SetPitch(pitch+0.2);}
		
		
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,47,WOF_INTERPOLATE);			A_WeaponOffset(25,85,WOF_INTERPOLATE);}
		XCSN I 1 {A_SetAngle(angle+0.2,SPF_INTERPOLATE); A_SetPitch(pitch+0.2);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,36,WOF_INTERPOLATE);			A_WeaponOffset(50,65,WOF_INTERPOLATE);}
		XCSN J 1 {A_SetAngle(angle+0.3,SPF_INTERPOLATE); A_SetPitch(pitch+0.2);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,30,WOF_INTERPOLATE);			A_WeaponOffset(70,45,WOF_INTERPOLATE);}
		XCSN I 1 {A_SetAngle(angle+0.5,SPF_INTERPOLATE); A_SetPitch(pitch+0.4);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,-4,WOF_INTERPOLATE);			A_WeaponOffset(80,38,WOF_INTERPOLATE);}
		XCSN J 1 {A_SetAngle(angle+0.3,SPF_INTERPOLATE); A_SetPitch(pitch+0.1);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,-26);							A_WeaponOffset(200,45);}
		XCSN I 1 {A_SetAngle(angle+0.1,SPF_INTERPOLATE);}
		
		
		
		
		
		
		
		
		ChainsawUpSwing:
		
		TNT1 A 0 A_TakeInventory("Quick_Chainsaw_Token",1);
		TNT1 A 0 A_TakeInventory("Quick_Melee_Token",1);
		
		TNT1 A 0 A_JumpIf(CountInv("ChainsawFuel") == 0, "ChainsawNoFuel");
		
		TNT1 A 0 A_StartSound("Chainsaw/Swing",CHAN_6,0,.5);
		
		TNT1 A 0 {A_OverlayRotate(0,0);									A_OverlayRotate(0,0);							A_WeaponOffset(0,32);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,80);							A_WeaponOffset(5,120);}
		XCSN I 1 {A_SetAngle(angle-0.2,SPF_INTERPOLATE); A_SetPitch(pitch-0.1);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,53,WOF_INTERPOLATE);			A_WeaponOffset(10,90,WOF_INTERPOLATE);}
		XCSN J 1 {A_SetAngle(angle-0.1,SPF_INTERPOLATE); A_SetPitch(pitch-0.2);}
		
		TNT1 A 0 
		{
			FTranslatedLineTarget t;

			LineAttack(Angle,90,Pitch,0,"Chainsaw","none",LAF_NORANDOMPUFFZ,t);
			
			If (t.linetarget)
			{
				invoker.amountCfuel = t.linetarget.health * 0.01;
				If(invoker.amountCfuel <= 1)
				{
					invoker.amountCfuel = 1;
				}
			}
			
			If(t.linetarget && CountInv("ChainsawFuel") <= 0 && t.linetarget.bisMONSTER == FALSE) //If(t.linetarget && t.linetarget.health>=450)
			{
			Return ResolveState("ChainsawFail");
			}
			If(t.linetarget && CountInv("ChainsawFuel") >= invoker.amountCfuel && t.linetarget.bisMONSTER == TRUE) //If(t.linetarget && t.linetarget.health<=450)
			{
				A_GiveInventory("GKProtection");
				TakeInventory("ChainsawFuel",invoker.amountCfuel);
				
				bShootable=False;
				A_Stop();
				Invoker.GKill=t.linetarget;
				If(Invoker.GKill.FindState("Pain"))
				Invoker.GKill.SetStateLabel("Pain");
				Invoker.GKill.Tics=-1;
				Invoker.GKill.bShootable=Invoker.GKill.bSolid=False;
				Invoker.GKill.bNoGravity=True;
				//Invoker.GKill.Vel*=0;
				//Invoker.GKill.A_ChangeFlag("NOCLIP",true);
				Invoker.GKill.bNOCLIP = true;
				
				SetPlayerProperty(0,1,4);
				SetPlayerProperty(0,1,3);
				
				//bNoGravity=True;
				Let D=DEDashJump(FindInventory("DEDashJump"));
				If(D) D.DashSpeed=0;
				Vel*=0;
				Actor Travelingo=Spawn("GKTravelThingy",Pos+(0,0,3),ALLOW_REPLACE);
				If(Travelingo)
				{
					Invoker.GKill.A_Face(Self);
					Travelingo.Warp(Invoker.GKill,Invoker.GKill.Radius+Radius,0,0,WARPF_NOCHECKPOSITION);
					Vector2 Dir=LMBDLib.FaceVector(Travelingo.Pos,Travelingo.Pos);
					Travelingo.A_SetSize(Radius,Height);
					Travelingo.specialf1=deltaangle(Angle,Dir.X); //Dir.X
					Travelingo.specialf2=deltaangle(Pitch,0);
					Travelingo.Vel3DFromAngle(Distance3D(Travelingo)/6.,Dir.X,Dir.Y); //Dir.X,Dir.Y
					Travelingo.Target=Self;
					Travelingo.Warp(Self,0,0,0);
					Travelingo.Tracer=Invoker.GKill;
					Invoker.GKill.Angle+=180;
					Invoker.SawDelay=35*3;
				}
				Return ResolveState("ChainsawSuccess");
			}
			Return ResolveState(Null);
		}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,47,WOF_INTERPOLATE);			A_WeaponOffset(25,85,WOF_INTERPOLATE);}
		XCSN I 1 {A_SetAngle(angle-0.2,SPF_INTERPOLATE); A_SetPitch(pitch-0.2);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,36,WOF_INTERPOLATE);			A_WeaponOffset(50,65,WOF_INTERPOLATE);}
		XCSN J 1 {A_SetAngle(angle-0.3,SPF_INTERPOLATE); A_SetPitch(pitch-0.2);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,30,WOF_INTERPOLATE);			A_WeaponOffset(70,45,WOF_INTERPOLATE);}
		XCSN I 1 {A_SetAngle(angle-0.5,SPF_INTERPOLATE); A_SetPitch(pitch-0.4);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,-4,WOF_INTERPOLATE);			A_WeaponOffset(80,38,WOF_INTERPOLATE);}
		XCSN J 1 {A_SetAngle(angle-0.3,SPF_INTERPOLATE); A_SetPitch(pitch-0.1);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,-26,WOF_INTERPOLATE);			A_WeaponOffset(200,45,WOF_INTERPOLATE);}
		XCSN I 1 {A_SetAngle(angle-0.1,SPF_INTERPOLATE);}
		
		//TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		//TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		//TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		
		Goto Ready3;
		













		
	ChainsawSuccess:
		TNT1 A 0{
			A_StartSound("Chainsaw/Swing",CHAN_WEAPON,CHANF_OVERLAP,0.25);
			A_StartSound("Chainsaw/Full",CHAN_WEAPON,CHANF_OVERLAP,0.6);
			A_StartSound("Chainsaw/CutFlesh",CHAN_7,CHANF_OVERLAP|CHANF_LOOPING,0.75);
			A_QuakeEx(1,1,1,100,0,100,"*");
		}
		
		//TNT1 A 0 A_Jumpif();
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,35,WOF_INTERPOLATE);			A_WeaponOffset(100,38,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,35,WOF_INTERPOLATE);			A_WeaponOffset(100,40,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,34,WOF_INTERPOLATE);			A_WeaponOffset(99,42,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,33,WOF_INTERPOLATE);			A_WeaponOffset(98,45,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,32,WOF_INTERPOLATE);			A_WeaponOffset(97,47,WOF_INTERPOLATE);}
		XCSN I 1;
		
		TNT1 A 0 {Invoker.GKill.A_Pain();}
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,33,WOF_INTERPOLATE);			A_WeaponOffset(98,49,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,33,WOF_INTERPOLATE);			A_WeaponOffset(98,52,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,34,WOF_INTERPOLATE);			A_WeaponOffset(99,56,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,34,WOF_INTERPOLATE);			A_WeaponOffset(99,58,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,34,WOF_INTERPOLATE);			A_WeaponOffset(99,60,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,32,WOF_INTERPOLATE);			A_WeaponOffset(94,63,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,32,WOF_INTERPOLATE);			A_WeaponOffset(90,65,WOF_INTERPOLATE);}
		XCSN J 1;
		
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,31,WOF_INTERPOLATE);			A_WeaponOffset(89,67,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,29,WOF_INTERPOLATE);			A_WeaponOffset(86,70,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,27,WOF_INTERPOLATE);			A_WeaponOffset(80,73,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,26,WOF_INTERPOLATE);			A_WeaponOffset(79,74,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,25,WOF_INTERPOLATE);			A_WeaponOffset(78,75,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,24,WOF_INTERPOLATE);			A_WeaponOffset(76,76,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,23,WOF_INTERPOLATE);			A_WeaponOffset(70,79,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,22,WOF_INTERPOLATE);			A_WeaponOffset(64,95,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,22,WOF_INTERPOLATE);			A_WeaponOffset(63,101,WOF_INTERPOLATE);}
		XCSN I 1;
		
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		TNT1 A 0 {Invoker.GKill.A_Pain();}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,21,WOF_INTERPOLATE);			A_WeaponOffset(63,108,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,20,WOF_INTERPOLATE);			A_WeaponOffset(62,114,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,18,WOF_INTERPOLATE);			A_WeaponOffset(62,120,WOF_INTERPOLATE);}
		XCSN J 1;
		
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,17,WOF_INTERPOLATE);			A_WeaponOffset(61,123,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,15,WOF_INTERPOLATE);			A_WeaponOffset(60,125,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		TNT1 A 0
		{
			If(Invoker.GKill)
			{
				Invoker.GKill.Target=Self;
				Invoker.GKill.A_SpawnItemEx("DeBulletLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeBulletLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeBulletLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);

				Invoker.GKill.A_SpawnItemEx("DeRocketLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeRocketLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeRocketLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeRocketLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeRocketLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeRocketLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeRocketLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeRocketLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeRocketLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeRocketLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeRocketLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeRocketLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				
				Invoker.GKill.A_SpawnItemEx("DeShellLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeShellLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeShellLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				
				Invoker.GKill.A_SpawnItemEx("DeCellLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeCellLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
				Invoker.GKill.A_SpawnItemEx("DeCellLoot",0,0,0,FRandom(0,5),0,FRandom(4,8),FRandom(1,360),SXF_NOCHECKPOSITION|SXF_TRANSFErPointers);
			}
		}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,15,WOF_INTERPOLATE);			A_WeaponOffset(60,132,WOF_INTERPOLATE);}
		XCSN I 1;
		
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,15,WOF_INTERPOLATE);			A_WeaponOffset(60,133,WOF_INTERPOLATE);}
		XCSN J 1;
		
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,16,WOF_INTERPOLATE);			A_WeaponOffset(60,134,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,16,WOF_INTERPOLATE);			A_WeaponOffset(60,135,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,17,WOF_INTERPOLATE);			A_WeaponOffset(60,136,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,18,WOF_INTERPOLATE);			A_WeaponOffset(60,137,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,18,WOF_INTERPOLATE);			A_WeaponOffset(60,138,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,17,WOF_INTERPOLATE);			A_WeaponOffset(60,139,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,17,WOF_INTERPOLATE);			A_WeaponOffset(60,140,WOF_INTERPOLATE);}
		XCSN I 1;
		
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,16,WOF_INTERPOLATE);			A_WeaponOffset(60,142,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,16,WOF_INTERPOLATE);			A_WeaponOffset(60,144,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,17,WOF_INTERPOLATE);			A_WeaponOffset(60,145,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,18,WOF_INTERPOLATE);			A_WeaponOffset(60,145,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,19,WOF_INTERPOLATE);			A_WeaponOffset(60,146,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,21,WOF_INTERPOLATE);			A_WeaponOffset(61,148,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,22,WOF_INTERPOLATE);			A_WeaponOffset(61,150,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,22,WOF_INTERPOLATE);			A_WeaponOffset(61,151,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,21,WOF_INTERPOLATE);			A_WeaponOffset(61,152,WOF_INTERPOLATE);}
		XCSN J 1;
		
		
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		TNT1 A 0 {Invoker.GKill.A_Pain();}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,21,WOF_INTERPOLATE);			A_WeaponOffset(61,153,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,22,WOF_INTERPOLATE);			A_WeaponOffset(61,153,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,23,WOF_INTERPOLATE);			A_WeaponOffset(62,154,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,23,WOF_INTERPOLATE);			A_WeaponOffset(62,155,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,24,WOF_INTERPOLATE);			A_WeaponOffset(63,156,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,24,WOF_INTERPOLATE);			A_WeaponOffset(64,157,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,25,WOF_INTERPOLATE);			A_WeaponOffset(66,158,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,26,WOF_INTERPOLATE);			A_WeaponOffset(69,159,WOF_INTERPOLATE);}
		XCSN J 1;
		
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,26,WOF_INTERPOLATE);			A_WeaponOffset(72,150,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,27,WOF_INTERPOLATE);			A_WeaponOffset(75,150,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,29,WOF_INTERPOLATE);			A_WeaponOffset(78,150,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,28,WOF_INTERPOLATE);			A_WeaponOffset(80,150,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,28,WOF_INTERPOLATE);			A_WeaponOffset(83,150,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,30,WOF_INTERPOLATE);			A_WeaponOffset(87,150,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,32,WOF_INTERPOLATE);			A_WeaponOffset(91,140,WOF_INTERPOLATE);}
		XCSN I 1;
		
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		TNT1 A 0 {Invoker.GKill.A_Pain();}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,34,WOF_INTERPOLATE);			A_WeaponOffset(93,140,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,36,WOF_INTERPOLATE);			A_WeaponOffset(96,140,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,37,WOF_INTERPOLATE);			A_WeaponOffset(98,140,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,39,WOF_INTERPOLATE);			A_WeaponOffset(101,140,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,40,WOF_INTERPOLATE);			A_WeaponOffset(103,140,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,42,WOF_INTERPOLATE);			A_WeaponOffset(105,140,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,43,WOF_INTERPOLATE);			A_WeaponOffset(107,140,WOF_INTERPOLATE);}
		XCSN J 1;
		
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,44,WOF_INTERPOLATE);			A_WeaponOffset(110,140,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,46,WOF_INTERPOLATE);			A_WeaponOffset(112,140,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,47,WOF_INTERPOLATE);			A_WeaponOffset(114,140,WOF_INTERPOLATE);}
		XCSN I 1;
		
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		TNT1 A 0 {Invoker.GKill.A_Pain();}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,48,WOF_INTERPOLATE);			A_WeaponOffset(117,140,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,49,WOF_INTERPOLATE);			A_WeaponOffset(119,151,WOF_INTERPOLATE);}
		XCSN I 1;
		
		TNT1 A 0 {Invoker.GKill.A_SpawnItemEx("blood",Invoker.GKill.Radius,0,FRandom(0,Invoker.GKill.Height),0,0,0,0,SXF_USEBLOODCOLOR);}
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);			A_OverlayRotate(0,50,WOF_INTERPOLATE);			A_WeaponOffset(120,160,WOF_INTERPOLATE);}
		XCSN J 1;

		TNT1 A 0
		{
			
			SetPlayerProperty(0,0,4);
			SetPlayerProperty(0,0,3);
			
			If(Invoker.GKill)
			{
				Invoker.GKill.bShootable=True;
				Invoker.GKill.DamageMobj(Self,Self,999999,"Chainsaw"); //Chainsaw
				//Invoker.GKill.Vel*=0;
			}
			A_StopSound(CHAN_WEAPON);
			A_StartSound("Chainsaw/End",CHAN_7,0,0.25); //.25
			bNoGravity=False;
			A_TakeInventory("GKProtection");
			//A_TakeInventory("ChainsawFuel",1);
			A_GiveInventory("GKProtection2");
			bShootable=True;
			A_ClearOverlays(100,120);
			Invoker.GKill=Null;
			Invoker.SawDelay=0;
			//A_TakeInventory("SawInputThing");
		}
		Goto Ready3;
		
		
		
		
		
		
		
		
		
		
	ChainsawNoFuel:
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,-26);							A_WeaponOffset(200,45);}
		XCSN A 1 {A_SetAngle(angle+0.1,SPF_INTERPOLATE);}
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,-4,WOF_INTERPOLATE);			A_WeaponOffset(80,38,WOF_INTERPOLATE);}
		XCSN A 1 {A_SetAngle(angle+0.3,SPF_INTERPOLATE); A_SetPitch(pitch+0.1);}
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,-2,WOF_INTERPOLATE);			A_WeaponOffset(75,40,WOF_INTERPOLATE);}
		XCSN A 1 {A_SetAngle(angle+0.3,SPF_INTERPOLATE); A_SetPitch(pitch+0.1);}
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,1,WOF_INTERPOLATE);			A_WeaponOffset(72,43,WOF_INTERPOLATE);}
		XCSN A 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,1,WOF_INTERPOLATE);			A_WeaponOffset(70,45,WOF_INTERPOLATE);}
		XCSN A 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,2,WOF_INTERPOLATE);			A_WeaponOffset(69,47,WOF_INTERPOLATE);}
		XCSN A 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,4,WOF_INTERPOLATE);			A_WeaponOffset(68,48,WOF_INTERPOLATE);}
		XCSN A 1;
		
		TNT1 A 0 A_StartSound("Chainsaw/LowFuel",CHAN_6,0,.5);
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,20,WOF_INTERPOLATE);			A_WeaponOffset(90,52,WOF_INTERPOLATE);}
		XCSN A 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,22,WOF_INTERPOLATE);			A_WeaponOffset(94,53,WOF_INTERPOLATE);}
		XCSN A 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,23,WOF_INTERPOLATE);			A_WeaponOffset(97,54,WOF_INTERPOLATE);}
		XCSN A 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,24,WOF_INTERPOLATE);			A_WeaponOffset(98,54,WOF_INTERPOLATE);}
		XCSN A 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,26,WOF_INTERPOLATE);			A_WeaponOffset(99,55,WOF_INTERPOLATE);}
		XCSN A 1;
		
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,10,WOF_INTERPOLATE);			A_WeaponOffset(80,59,WOF_INTERPOLATE);}
		XCSN A 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,9,WOF_INTERPOLATE);			A_WeaponOffset(82,68,WOF_INTERPOLATE);}
		XCSN A 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,8,WOF_INTERPOLATE);			A_WeaponOffset(86,85,WOF_INTERPOLATE);}
		XCSN A 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,6,WOF_INTERPOLATE);			A_WeaponOffset(88,120,WOF_INTERPOLATE);}
		XCSN A 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,4,WOF_INTERPOLATE);			A_WeaponOffset(90,160,WOF_INTERPOLATE);}
		XCSN A 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,1,WOF_INTERPOLATE);			A_WeaponOffset(93,195,WOF_INTERPOLATE);}
		XCSN A 1;
		
		//XCSN I 20;
		Goto Ready3;
		
	ChainsawFail:
		TNT1 A 0 A_StartSound("Chainsaw/OutRange",CHAN_6,0,.5);
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,25,WOF_INTERPOLATE);			A_WeaponOffset(80,45,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,21,WOF_INTERPOLATE);			A_WeaponOffset(85,50,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,16,WOF_INTERPOLATE);			A_WeaponOffset(89,56,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,13,WOF_INTERPOLATE);			A_WeaponOffset(94,80,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,10,WOF_INTERPOLATE);			A_WeaponOffset(98,100,WOF_INTERPOLATE);}
		XCSN I 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,8,WOF_INTERPOLATE);			A_WeaponOffset(103,130,WOF_INTERPOLATE);}
		XCSN J 1;
		TNT1 A 0 {A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);		A_OverlayRotate(0,3,WOF_INTERPOLATE);			A_WeaponOffset(110,180,WOF_INTERPOLATE);}
		XCSN I 1;
	
		//DSAW ABCDEFGHI 1;
		Goto Ready3;
		
		
		
		
	BloodPunchLeft:
		TNT1 A 0 A_JumpIf(CountInv("BloodPunchCharges") == 0, "LeftQuickMelee");
		
		TNT1 A 0 A_QuakeEx(1,1,1,5,0,100,"*");
		TNT1 A 0 A_StartSound("BerzerkSwing",0,0,.7);
		TNT1 A 0 A_StartSound("PunchSwing",CHAN_5,0,.6);
	
		TNT1 A 0 A_TakeInventory("Quick_Melee_Token",1);
		TNT1 A 0 {A_SetAngle(angle-0.3,SPF_INTERPOLATE); A_SetPitch(pitch+0.2,SPF_INTERPOLATE);}
		BPLH A 1;
		TNT1 A 0 {A_SetAngle(angle-0.5,SPF_INTERPOLATE); A_SetPitch(pitch+0.4,SPF_INTERPOLATE);}
		BPLH B 1;
		TNT1 A 0 A_FireProjectile("PunchBoom",0,false);
		TNT1 A 0 A_CustomPunch(0,FALSE,0,"PunchBurnPuff",100,0,0,"ArmorBonus","*");
		TNT1 A 0 {A_SetAngle(angle-0.1,SPF_INTERPOLATE); A_SetPitch(pitch+0.1,SPF_INTERPOLATE);}
		BPLH C 1;
		TNT1 A 0 {A_SetAngle(angle+0.6,SPF_INTERPOLATE); A_SetPitch(pitch-0.5,SPF_INTERPOLATE);}
		BPLH D 1;
		TNT1 A 0 {A_SetAngle(angle+0.3,SPF_INTERPOLATE); A_SetPitch(pitch-0.2,SPF_INTERPOLATE);}
		BPLH E 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"BloodPunchRight");
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		BPLH F 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"BloodPunchRight");
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		BPLH G 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"BloodPunchRight");
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"BloodPunchRight");
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"BloodPunchRight");
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"BloodPunchRight");
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"BloodPunchRight");
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		Goto Ready3;
		
	BloodPunchRight:
		TNT1 A 0 A_JumpIf(CountInv("BloodPunchCharges") == 0, "RightQuickMelee");
		
		TNT1 A 0 A_QuakeEx(1,1,1,5,0,100,"*");
		TNT1 A 0 A_StartSound("BerzerkSwing",0,0,.7);
		TNT1 A 0 A_StartSound("PunchSwing",CHAN_5,0,.6);
	
		TNT1 A 0 A_TakeInventory("Quick_Melee_Token",1);
		TNT1 A 0 {A_SetAngle(angle+0.3,SPF_INTERPOLATE); A_SetPitch(pitch+0.2,SPF_INTERPOLATE);}
		BPRH A 1;
		TNT1 A 0 {A_SetAngle(angle+0.5,SPF_INTERPOLATE); A_SetPitch(pitch+0.4,SPF_INTERPOLATE);}
		BPRH B 1;
		TNT1 A 0 A_FireProjectile("PunchBoom",0,false);
		TNT1 A 0 A_CustomPunch(0,FALSE,0,"PunchBurnPuff",100,0,0,"ArmorBonus","*");
		TNT1 A 0 {A_SetAngle(angle+0.1,SPF_INTERPOLATE); A_SetPitch(pitch+0.1,SPF_INTERPOLATE);}
		BPRH C 1;
		TNT1 A 0 {A_SetAngle(angle-0.6,SPF_INTERPOLATE); A_SetPitch(pitch-0.5,SPF_INTERPOLATE);}
		BPRH D 1;
		TNT1 A 0 {A_SetAngle(angle-0.3,SPF_INTERPOLATE); A_SetPitch(pitch-0.2,SPF_INTERPOLATE);}
		BPRH E 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"BloodPunchLeft");
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		BPRH F 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"BloodPunchLeft");
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		BPRH G 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"BloodPunchLeft");
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"BloodPunchLeft");
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"BloodPunchLeft");
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"BloodPunchLeft");
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"BloodPunchLeft");
		TNT1 A 0 A_JumpIfInventory("Quick_Chainsaw_Token",1,"ChainsawSwing");
		TNT1 A 1;
		Goto Ready3;
	
	LedgeClimb:
	
	TNT1 A 0 A_SetCrosshair(99);
	TNT1 A 0 A_ZoomFactor(1);
	TNT1 A 0 A_ClearOverlays(-1000,99);	
	TNT1 A 0 A_OverlayRotate(0,0);
	TNT1 A 0 A_WeaponOffset(0,32);
	
	TNT1 A 0 A_Stopsound(CHAN_5);
	TNT1 A 0 A_Stopsound(CHAN_6);
	TNT1 A 0 A_Stopsound(CHAN_7);
	TNT1 A 0 A_Stopsound(CHAN_WEAPON);
	TNT1 A 0 A_Stopsound(CHAN_ITEM);
	TNT1 A 0 A_Stopsound(CHAN_BODY);
	TNT1 A 0 A_Stopsound(CHAN_AUTO);
	TNT1 A 0 A_GiveInventory("LedgeGrabProtection");
	
			CL1M A 0;
			"####" A 0 A_Stop();
			//"####" A 0 A_GunFlash("LedgeGrabFlash");
			"####" A 0 A_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD|WRF_NOSWITCH);
			"####" A 0 SetPlayerProperty(0,1,PROP_TOTALLYFROZEN);
			"####" A 0 A_StartSound("ledgeclimb",CHAN_WEAPON);
			"####" ABC 1 {
				let plr = HellCrusher(self);
				
				if(Pos.Z < (plr.LedgeHeight - Height * 0.78f))
				{
					A_SetPitch(pitch-pitch/2, SPF_INTERPOLATE);
					Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
					//plr.velz--;
				}
				else if(Pos.Z < (plr.LedgeHeight - Height * 0.76f))
				{
					LedgeReach(0.751);
					return ResolveState("LedgeReach");
				}
				return ResolveState(null);
			}
		
			
		LedgeReach:
		
		"####" A 0 A_SetCrosshair(99);
		"####" A 0 A_ZoomFactor(1);
		"####" A 0 A_ClearOverlays(-1000,99);
		"####" A 0 A_GiveInventory("LedgeGrabProtection");
		"####" A 0 A_OverlayRotate(0,0);
		"####" A 0 A_WeaponOffset(0,32);
		
		"####" A 0 A_Stopsound(CHAN_5);
		"####" A 0 A_Stopsound(CHAN_6);
		"####" A 0 A_Stopsound(CHAN_7);
		"####" A 0 A_Stopsound(CHAN_ITEM);
		"####" A 0 A_Stopsound(CHAN_BODY);
		"####" A 0 A_Stopsound(CHAN_AUTO);
		
			"####" D 1 {
				let plr = HellCrusher(self);
				//if(Pos.Z >= (plr.LedgeHeight - Height * 0.78f) && Pos.Z < (plr.LedgeHeight - Height * 0.76f))
				if(Pos.Z >= (plr.LedgeHeight - Height * 0.78f))
				{
					A_SetPitch(pitch-pitch/2, SPF_INTERPOLATE);
					//GiveInventory("Grabbing_A_Ledge", 1);
					LedgeReach(0.751);
				}
				else if(Pos.Z < (plr.LedgeHeight - Height * 0.78f))
				{
					Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
				}
			}
			//"####" A 0 A_JumpIf(CountInv("Grabbing_A_Ledge")==1, 1);
			//Goto LedgeReach;
			
			"####" E 1 {
				let plr = HellCrusher(self);
				
				plr.velz = 3.6;//3.6;
				A_SetPitch(0, SPF_INTERPOLATE);
				LedgeReach(0.751);
				A_StopSound(CHAN_WEAPON);
				plr.LedgeAngle = Angle;
				plr.LedgeCheck = False;
				plr.LedgeGrabbed = True;
			}
			"####" F 1 {
				A_SetPitch(pitch-0.5, SPF_INTERPOLATE);
				Vel = Vel.Length() ? (0, 0, 0.5) : (0, 0, 0);
			}
			"####" G 1 {
				let plr = HellCrusher(self);
				A_SetPitch(pitch+3, SPF_INTERPOLATE);
				Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
			}
			"####" HI 1 {
				let plr = HellCrusher(self);
				A_SetPitch(pitch+4, SPF_INTERPOLATE);
				Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
			}
			
		FinishClimb:
		
		"####" A 0 A_SetCrosshair(99);
		"####" A 0 A_ZoomFactor(1);
		"####" A 0 A_ClearOverlays(-1000,99);
		"####" A 0 A_GiveInventory("LedgeGrabProtection");
		"####" A 0 A_OverlayRotate(0,0);
		"####" A 0 A_WeaponOffset(0,32);
		
		"####" A 0 A_Stopsound(CHAN_5);
		"####" A 0 A_Stopsound(CHAN_6);
		"####" A 0 A_Stopsound(CHAN_7);
		"####" A 0 A_Stopsound(CHAN_ITEM);
		"####" A 0 A_Stopsound(CHAN_BODY);
		"####" A 0 A_Stopsound(CHAN_AUTO);

		
			CL1M A 0;
			//"####" A 0 A_GunFlash("LedgeGrabFlash");
			"####" JK 1 {
				let plr = HellCrusher(self);
				
				plr.velz = 3.6;//3.6;
				A_SetPitch(pitch-3, SPF_INTERPOLATE);
				Vel = Vel.Length() ? (0, 0, plr.velz) : (0, 0, 0);
			}
			"####" LM 1 A_SetPitch(pitch-2, SPF_INTERPOLATE);
			TNT1 AA 1 {
				A_SetPitch(pitch-pitch/2, SPF_INTERPOLATE);
				A_WeaponReady();
			}
			TNT1 A 0 A_SetPitch(0, SPF_INTERPOLATE);
			TNT1 A 0 SetPlayerProperty(0,0,PROP_TOTALLYFROZEN);
			//TNT1 A 0 TakeInventory("Grabbing_A_Ledge", 1);
			TNT1 A 0;
			Goto Ready3; //15
				
	}
}

Class LedgeGrabProtection : PowerProtection { Default { DamageFactor "Normal", 0; Powerup.Duration 7; } } //7

//////////////////////////////////Melee Projectiles



Class BladeProjectile: FastProjectile
{
	Default {
	Radius 10;
	Height 3;
	
    DamageFunction 135; //30;
	
    Speed 44;//35;
	ProjectileKickback 125;
	
	SeeSound "none";
	DeathSound "none";
	DamageType "EnergyBlade";
	
	Projectile;
	+FORCEXYBILLBOARD;
	+NODECAL;
	}
	States
	{
	Spawn:
		TNT1 A 0;
        TNT1 A 1;
		Stop;
		
	Death:
		TNT1 A 0;
		TNT1 A 0 A_QuakeEx(1,1,1,8,0,100,"*");
		TNT1 A 0 A_StartSound("Crucible/HitZap",CHAN_7,CHANF_OVERLAP,.7);
		TNT1 A 0 A_StartSound("Crucible/Slice",CHAN_6,CHANF_OVERLAP,.4);
		TNT1 A 0 A_StartSound("BigWallHit",CHAN_5,CHANF_OVERLAP,.8);
		TNT1 A 100;
		Stop;
	
	XDeath:
		TNT1 A 0;
		TNT1 A 0 A_QuakeEx(1,1,1,8,0,100,"*");
		TNT1 A 0 A_StartSound("Crucible/HitZap",CHAN_7,CHANF_OVERLAP,.7);
		TNT1 A 0 A_StartSound("Crucible/Slice",CHAN_6,CHANF_OVERLAP,.4);
		TNT1 A 0 A_StartSound("BerzerkHitMonster",CHAN_5,CHANF_OVERLAP,.6);
		TNT1 A 0 A_StartSound("Crucible/MeatChop",CHAN_BODY,CHANF_OVERLAP,.7);
		TNT1 A 100;
		Stop;
	}
}

Class BladeProjectileBerserk: BladeProjectile
{
	Default {
	Radius 10;
	Height 3;
	
    DamageFunction 135;// 300;
	
    Speed 44;//35;
	ProjectileKickback 400;
	
	SeeSound "none";
	DeathSound "none";
	DamageType "EnergyBlade";
	
	Projectile;
	+FORCEXYBILLBOARD
	+NODECAL
	}
	States
	{
	Spawn:
		TNT1 A 0;
        TNT1 A 1;
		Stop;
		
	Death:
		TNT1 A 0;
		TNT1 A 0 A_QuakeEx(1,1,1,12,0,100,"*");
		TNT1 A 0 A_StartSound("Crucible/HitZap",CHAN_7,CHANF_OVERLAP,.7);
		TNT1 A 0 A_StartSound("Crucible/Slice",CHAN_6,CHANF_OVERLAP,.4);
		TNT1 A 0 A_StartSound("BerzerkHit",CHAN_5,CHANF_OVERLAP,.8);
		TNT1 A 10;
		Stop;
	
	
	XDeath:
		TNT1 A 0;
		TNT1 A 0 A_QuakeEx(1,1,1,12,0,100,"*");
		//TNT1 A 0 A_StartSound("BerzerkHit",CHAN_7,CHANF_OVERLAP,1);
		TNT1 A 0 A_StartSound("Crucible/HitZap",CHAN_7,CHANF_OVERLAP,.7);
		TNT1 A 0 A_StartSound("Crucible/Slice",CHAN_6,CHANF_OVERLAP,.4);
		TNT1 A 0 A_StartSound("BerzerkHitMonster",CHAN_5,CHANF_OVERLAP,.8);
		TNT1 A 0 A_StartSound("Crucible/MeatChop",CHAN_BODY,CHANF_OVERLAP,.8);
		TNT1 A 10;
		Stop;
	}
}


Class BladePuffR : Actor
{	
	Default
	{
	Decal "PunchRight";
	}
	
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}


Class BladePuffL : FaceSmasherPuffR
{	
	Default
	{
	Decal "BladeCutLeft";
	}
}

Class BladePuffRight : FaceSmasherPuffR
{	
	Default
	{
	Decal "BladeCutRight";
	}
}

//////

Class BladePuffRB : Actor
{	
	Default
	{
	Decal "PunchRightBerserk";
	}
	
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

Class BladePuffLB : FaceSmasherPuffR
{	
	Default
	{
	Decal "BladeCutLeft";
	}
}

//////

Class FaceSmasherPuffR : Actor
{	
	Default
	{
	Decal "PunchRight";
	}
	
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

Class FaceSmasherPuffL : FaceSmasherPuffR
{	
	Default
	{
	Decal "PunchLeft";
	}
}

//////

Class FaceSmasherPuffRB : Actor
{	
	Default
	{
	Decal "PunchRightBerserk";
	}
	
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

Class FaceSmasherPuffLB : FaceSmasherPuffR
{	
	Default
	{
	Decal "PunchLeftBerserk";
	}
}

//////

Class KickBurnPuff : Actor
{	
	Default
	{
	Decal "KickBurn";
	}
	
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

Class PunchBurnPuff : KickBurnPuff
{	
	Default
	{
	Decal "PunchBurn";
	}
}

//////

Class FaceSmasherPunch: FastProjectile
{
	Default {
	Radius 10;
	Height 3;
	
    DamageFunction 90; //20;
	
    Speed 40;
	ProjectileKickback 100;
	
	SeeSound "none";
	DeathSound "none";
	//DamageType "SuperPunch";
	
	Projectile;
	+FORCEXYBILLBOARD;
	+NODECAL;
	}
	States
	{
	Spawn:
		TNT1 A 0;
        TNT1 A 1;
		Stop;
		
	Death:
		TNT1 A 0;
		TNT1 A 0 Radius_Quake(1, 4, 0, 5, 0);
		TNT1 A 0 A_StartSound("KickWall",CHAN_5,CHANF_OVERLAP,1);
		TNT1 A 100;
		Stop;
	
	XDeath:
		TNT1 A 0;
		TNT1 A 0 Radius_Quake(1, 4, 0, 5, 0);
		TNT1 A 0 A_StartSound("MeleeHit",CHAN_5,CHANF_OVERLAP,1);
		TNT1 A 100;
		Stop;
	}
}

Class FaceSmasherPunchBerserk: FaceSmasherPunch
{
	Default {
	Radius 10;
	Height 3;
	
    DamageFunction 900; //200;
	
    Speed 35;
	ProjectileKickback 800;
	
	SeeSound "none";
	DeathSound "none";
	//DamageType "ExplosiveImpact";
	
	Projectile;
	+FORCEXYBILLBOARD
	+NODECAL
	}
	States
	{
	Spawn:
		TNT1 A 0;
        TNT1 A 1;
		Stop;
		
	Death:
		TNT1 A 0;
		TNT1 A 0 Radius_Quake(1, 10, 0, 5, 0);
		TNT1 A 0 A_StartSound("BerzerkHit",CHAN_5,CHANF_OVERLAP,1);
		TNT1 A 10;
		Stop;
	
	
	XDeath:
		TNT1 A 0;
		TNT1 A 0 Radius_Quake(1, 10, 0, 5, 0);
		//TNT1 A 0 A_StartSound("BerzerkHit",CHAN_7,CHANF_OVERLAP,1);
		TNT1 A 0 A_StartSound("BerzerkHitMonster",CHAN_5,CHANF_OVERLAP,1);
		TNT1 A 10;
		Stop;
	}
}

Class GKTravelThingy : FastProjectile
{
	Default
	{
		+MISSILE
		Speed 32;
		Damage 0;
		+PAINLESS +BLOODLESSIMPACT
	}
	States
	{
	Spawn:
		TNT1 A 0;
		BAL1 AAAAA 1 Bright
		{
			If(!Target) Return;
			
			//Target.Angle+=specialf1;///6.;
			//Target.Pitch+=specialf2;///6.;
			
			Target.Warp(Self,0,0,0,0,WARPF_USECALLERANGLE|WARPF_NOCHECKPOSITION);
		}
	Death:
		TNT1 A 5
		{
			If(!Target || !Tracer ) Return;
			
			//Target.Angle=specialf1;//*6;
			//Target.Pitch=specialf2;//*6;
			
			Target.Pitch= 70 - Tracer.height; //0;
			
			Target.Warp(Self,0,0,0,0,WARPF_USECALLERANGLE|WARPF_NOCHECKPOSITION);
			Tracer.Warp(Self,Tracer.Radius+Target.Radius,0,0,WARPF_USECALLERANGLE|WARPF_NOCHECKPOSITION);
			Tracer.A_Face(Target);
		}
		Stop;
	}
}

Class PunchBoom: FastProjectile
{
	Default {
	Radius 10;
	Height 3;
	
	RenderStyle "Add";
	Alpha 0.75;
	
    DamageFunction 675; //150;
    Speed 40;
	
	SeeSound "none";
	DeathSound "none";
	//Decal "BFGLightning";
	DamageType "BloodPunch";
	
	Projectile;
	+NODECAL
	+FORCEXYBILLBOARD
	+EXTREMEDEATH
	+ZDOOMTRANS
	+USEBOUNCESTATE
	+FORCEPAIN
	}
	States
	{
	Spawn:
		TNT1 A 0;
        TNT1 A 1;
		Stop;
		
	Bounce.Floor: 
	Bounce.Ceiling:
	Bounce.Wall:
	Death:
	
		TNT1 A 0
			{
				for (int i = random(1,4); i > 0; i--)
				{
					A_SpawnItemEx("BFGMiniSparkleRed",0,0,0,frandom(-20,20),frandom(-20,20),frandom(-20,20));
				}
			}
	
		TNT1 A 0;
		TNT1 A 0 A_StartSound("Crucible/PuffHit",0,CHANF_OVERLAP,.6);
		TTN1 A 1;
		TNT1 A 0 A_StartSound("Crucible/PuffHit",0,CHANF_OVERLAP,.7);
		TTN1 A 1;
		TNT1 A 0 A_StartSound("Crucible/PuffHit",0,CHANF_OVERLAP,.5);
		TTN1 A 5;
		TNT1 A 0 A_StartSound("Crucible/PuffHit",0,CHANF_OVERLAP,.4);
		TTN1 A 1;
		Stop;
		
	XDeath:
			TNT1 A 0;
			TNT1 A 0 {target.TakeInventory("BloodPunchCharges",1);}
			TNT1 A 0 A_StartSound("BloodPunch/HitSuccess",0,CHANF_OVERLAP,1);

			TNT1 A 0 Radius_Quake (2, 6, 0, 5, 0);//(intensity, duration, damrad, tremrad, tid)
			TNT1 A 0 A_Explode(140,0,0);
			
			TNT1 A 0 A_SpawnItemEx("BFGBigSparkleRed",random(-100,100),random(-100,100),random(-100,100));
			TNT1 AA 0 A_SpawnItemEx("BFGSmallSparkleRed",random(-125,125),random(-125,125),random(-125,125));
			TNT1 AAA 0 A_SpawnItemEx("BFGMiniSparkleRed",random(-150,150),random(-150,150),random(-150,150),random(-15,15),random(-15,15),random(-15,15));
			
			TNT1 A 0
			{
				for (int i = random(10,20); i > 0; i--)
				{
					A_SpawnItemEx("RocketSmokeTrail",0,0,0,frandom(-20,20),frandom(-20,20),frandom(-20,20));
				}
			}
			
			TNT1 A 0
			{
				for (int i = random(1,3); i > 0; i--)
				{
					A_SpawnItemEx("ExplosiveDebris",0,0,0,frandom(-30,30),frandom(-30,30),frandom(-30,30));
				}
			}
			
			TNT1 A 0
			{
				for (int i = random(1,3); i > 0; i--)
				{
					A_SpawnItemEx("ExplosionShockWave",0,0,0,0,0,0);
				}
			}
		
			BFR1 ABCCDDEEE 1 BRIGHT;
		Stop;
	}
}

class BFGBigSparkleRed : HC_FXClass
{
	Default
	{	
		Scale 1;
		+EXTREMEDEATH
		+FORCEXYBILLBOARD
		+NOBLOCKMAP
		+NOGRAVITY
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 0.75;
	}
	States
	{
	Spawn:
		BFR1 ABCDEF 2 Bright;
		Stop;
	}
}

class BFGSmallSparkleRed : HC_FXClass
{
	Default
	{	
		Scale 1;
		+EXTREMEDEATH
		+FORCEXYBILLBOARD
		+NOBLOCKMAP
		+NOGRAVITY
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 0.75;
	}
	States
	{
	Spawn:
		BFR2 ABCD 2 Bright;
		Stop;
	}
}

class BFGMiniSparkleRed : HC_FXClass
{
	Default
	{	
		Radius 4;
		Height 4;
		Scale 1;
		+EXTREMEDEATH
		+FORCEXYBILLBOARD
		+NOBLOCKMAP
		+NOGRAVITY
		+ZDOOMTRANS
		projectile;
		RenderStyle "Add";
		Alpha 0.75;
	}
	States
	{
	Spawn:
		BFR2 D random(150,175) Bright;
	Death:
	XDeath:
		BFR2 D 1 A_Fadeout(0.01);
		Loop;
	}
}