Class HammerHasHit : Inventory	{	Default	{	inventory.maxamount 1;	}	}

Class ThermalDecimator : HellCrusherW Replaces Chainsaw
{

	bool hasHitEnemy, hamR, hamL, QuickSwitch;
	int HamCharge, QuickSwitchTimer, UpCount;

	Default {
	Weapon.BobRangeX 0.6;
	Weapon.BobRangeY 0.6;
	
	Weapon.Kickback 0;
	Weapon.SelectionOrder 2200;
	
	Inventory.PickupMessage "You got the Thermal Decimator! A melee BFG, with a off-hand Void Stream energy sword, now that is my cup of tea.";
	Inventory.PickupSound "HammerGet";
	//Obituary "$OB_MPCHAINSAW";
	Tag "Thermal Decimator";
	
	+WEAPON.MELEEWEAPON
	+WEAPON.NOALERT
	}
	States
	{
	
	
	
	
	
	Ready3:
		TNT1 A 0 A_TakeInventory("HammerHasHit",1);
		TNT1 A 1 A_Jump(255, "Ready3");
	Select:
		TNT1 A 0 {invoker.UpCount++;}
		TNT1 A 0 A_JumpIf(invoker.UpCount == 1, "Reload");
		
		TNT1 A 0 A_SetCrosshair(59);
		TNT1 A 0 {invoker.QuickSwitch = true;}
		TNT1 A 0 {invoker.QuickSwitchTimer = 0;}
		
		TNT1 A 0 A_StartSound("HammerSelect",CHAN_5,0,1);
		TNT1 A 0 A_StartSound("HammerGetHum",CHAN_6,0,.3);
		TNT1 A 0 A_ZoomFactor(1);
	RaiseUp:
		TNT1 A 0 A_OverlayScale(0,1,1);
		HAMM BCD 1 {A_WeaponReady(WRF_NOFIRE);	A_OverlayRotate(0,0);	A_WeaponOffset(0,32);}
		Goto Ready;
	
	QuickSwitchFail:
		TNT1 A 0 A_TakeInventory("HammerHasHit",1);
		TNT1 A 0 A_SetCrosshair(59);
		TNT1 A 0 {invoker.QuickSwitch = false;}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		HAMM E 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	Ready:
		TNT1 A 0 A_TakeInventory("HammerHasHit",1);
		TNT1 A 0 A_SetCrosshair(59);
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		TNT1 A 0 {invoker.QuickSwitchTimer++;}
		TNT1 A 0 A_Jumpif(invoker.QuickSwitchTimer >= 15,"QuickSwitchFail");
		HAMM E 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Loop;
	
	Deselect:
		TNT1 A 0 A_ZoomFactor(1);
		HAMM DCB 1 Offset(0,32);
		TNT1 A 0 A_Lower;
		Wait;
	DeselectQuickMelee:
		TNT1 A 0 A_ZoomFactor(1);
		HAMM DB 1 Offset(0,32);
		Goto QuickMeleeStart;
	
	HitFeel:
		TNT1 A 0 A_QuakeEx(3,3,3,12,0,100,"*");
		TNT1 A 1 A_ZoomFactor(0.80);
		TNT1 A 1 A_ZoomFactor(0.81);
		TNT1 A 1 A_ZoomFactor(0.84);
		TNT1 A 1 A_ZoomFactor(0.88);
		TNT1 A 1 A_ZoomFactor(0.93);
		TNT1 A 1 A_ZoomFactor(0.97);
		TNT1 A 1 A_ZoomFactor(0.99);
		TNT1 A 1 A_ZoomFactor(1);
		Stop;
	
	AltHitFeel:
		TNT1 A 0 A_QuakeEx(3,3,3,12,0,100,"*");
		TNT1 A 1 A_ZoomFactor(0.75);
		TNT1 A 1 A_ZoomFactor(0.76);
		TNT1 A 1 A_ZoomFactor(0.80);
		TNT1 A 1 A_ZoomFactor(0.86);
		TNT1 A 1 A_ZoomFactor(0.95);
		TNT1 A 1 A_ZoomFactor(0.98);
		TNT1 A 1 A_ZoomFactor(0.99);
		TNT1 A 1 A_ZoomFactor(1);
		Stop;
	
	RightCharge:
		TNT1 A 0 A_StartSound("WeaponDraw",CHAN_5,0,.8);
		TNT1 A 0 {invoker.HamCharge = 0;}
		TNT1 A 0 {invoker.hamR = true;}
		TNT1 A 0 {invoker.hamL = false;}
		
		TNT1 A 0 {A_SetPitch(pitch-0.3,SPF_INTERPOLATE);		A_SetAngle(angle-0.2,SPF_INTERPOLATE);}
		HAC3 A 1;
		TNT1 A 0 {A_SetPitch(pitch-0.25,SPF_INTERPOLATE);		A_SetAngle(angle-0.15,SPF_INTERPOLATE);}
		HAC3 B 1;
		TNT1 A 0 {A_SetPitch(pitch-0.2,SPF_INTERPOLATE);		A_SetAngle(angle-0.10,SPF_INTERPOLATE);}
		HAC3 C 1;
		TNT1 A 0 {A_SetPitch(pitch-0.1,SPF_INTERPOLATE);		A_SetAngle(angle-0.05,SPF_INTERPOLATE);}
		HAC3 D 1;
		TNT1 A 0 {A_SetPitch(pitch-0.05,SPF_INTERPOLATE);		A_SetAngle(angle-0.025,SPF_INTERPOLATE);}
		HAC3 E 1;
		TNT1 A 0 {A_SetPitch(pitch+0.05,SPF_INTERPOLATE);		A_SetAngle(angle+0.025,SPF_INTERPOLATE);}
		HAC3 F 1;
		TNT1 A 0 {A_SetPitch(pitch+0.1,SPF_INTERPOLATE);		A_SetAngle(angle+0.05,SPF_INTERPOLATE);}
		HAC3 G 1;
		TNT1 A 0 {A_SetPitch(pitch+0.3,SPF_INTERPOLATE);		A_SetAngle(angle+0.2,SPF_INTERPOLATE);}
		HAC3 H 1;
		TNT1 A 0 {A_SetPitch(pitch+0.40,SPF_INTERPOLATE);		A_SetAngle(angle+0.25,SPF_INTERPOLATE);}
		HAMC I 1;
		
		TNT1 A 0 A_StartSound("HexShotgunFireAdd2",CHAN_WEAPON,0,.4);
		TNT1 A 0 A_StartSound("HexShotgunShing",CHAN_6,0,1);
		TNT1 A 0 A_StartSound("BFGidle",CHAN_5,CHANF_LOOP,.8);
		TNT1 A 0 A_StartSound("HexShotgunCharge2",CHAN_7,CHANF_LOOP,.7);
		Goto RightReady;
		
	Fire:
		TNT1 A 0 {A_Overlay(10,"*"); A_WeaponOffset(0,32);}
		TNT1 A 0 A_Jumpif((invoker.QuickSwitch == true),"QuickSwitchSucc");
	
		TNT1 A 0 A_Jumpif((invoker.hamR == true),"LeftCharge"); //LPunch
		TNT1 A 0 A_Jumpif((invoker.hamL == true),"MainRightCharge"); //RPunch
	
	MainRightCharge:
		TNT1 A 0 A_StartSound("WeaponDraw",CHAN_5,0,.8);
		TNT1 A 0 {invoker.HamCharge = 0;}
		TNT1 A 0 {invoker.hamR = true;}
		TNT1 A 0 {invoker.hamL = false;}
		
		TNT1 A 0 {A_SetPitch(pitch-0.3,SPF_INTERPOLATE);		A_SetAngle(angle-0.2,SPF_INTERPOLATE);}
		HAMC A 1;
		TNT1 A 0 {A_SetPitch(pitch-0.25,SPF_INTERPOLATE);		A_SetAngle(angle-0.15,SPF_INTERPOLATE);}
		HAMC B 1;
		TNT1 A 0 {A_SetPitch(pitch-0.2,SPF_INTERPOLATE);		A_SetAngle(angle-0.10,SPF_INTERPOLATE);}
		HAMC C 1;
		TNT1 A 0 {A_SetPitch(pitch-0.1,SPF_INTERPOLATE);		A_SetAngle(angle-0.05,SPF_INTERPOLATE);}
		HAMC D 1;
		TNT1 A 0 {A_SetPitch(pitch-0.05,SPF_INTERPOLATE);		A_SetAngle(angle-0.025,SPF_INTERPOLATE);}
		HAMC E 1;
		TNT1 A 0 {A_SetPitch(pitch+0.05,SPF_INTERPOLATE);		A_SetAngle(angle+0.025,SPF_INTERPOLATE);}
		HAMC F 1;
		TNT1 A 0 {A_SetPitch(pitch+0.1,SPF_INTERPOLATE);		A_SetAngle(angle+0.05,SPF_INTERPOLATE);}
		HAMC G 1;
		TNT1 A 0 {A_SetPitch(pitch+0.3,SPF_INTERPOLATE);		A_SetAngle(angle+0.2,SPF_INTERPOLATE);}
		HAMC H 1;
		TNT1 A 0 {A_SetPitch(pitch+0.40,SPF_INTERPOLATE);		A_SetAngle(angle+0.25,SPF_INTERPOLATE);}
		HAMC I 1;
		
		TNT1 A 0 A_QuakeEx(2,2,2,5,0,100,"*");
		TNT1 A 0 A_StartSound("HexShotgunFireAdd2",CHAN_WEAPON,0,.4);
		//TNT1 A 0 A_StartSound("HexShotgunShing",CHAN_6,0,1);
		TNT1 A 0 A_StartSound("BFGidle",CHAN_5,CHANF_LOOP,.8);
		TNT1 A 0 A_StartSound("HexShotgunCharge2",CHAN_7,CHANF_LOOP,.7);
	
	RightReady:
		TNT1 A 0 {invoker.HamCharge++;}
		HAMC I 1 A_WeaponOffset(Random(-1,1),Random(32,33),WOF_INTERPOLATE);
		TNT1 A 0 A_JumpIf(invoker.HamCharge >= 25, 2);
		TNT1 A 0 A_Refire("RightReady");
		Goto SmallRightSwing;
		TNT1 A 0 A_QuakeEx(3,3,3,5,0,100,"*");
		TNT1 A 0 A_StartSound("HexShotgunFireAdd2",CHAN_WEAPON,0,.4);
		TNT1 A 0 A_StartSound("HexShotgunShing",CHAN_6,0,0.5);
		TNT1 A 0 A_StartSound("BFGidle",CHAN_5,CHANF_LOOP,.8);
		TNT1 A 0 A_StartSound("HexShotgunCharge2",CHAN_7,CHANF_LOOP,.7);
	RightTierTwo:	
		TNT1 A 0 {invoker.HamCharge++;}
		TNT1 A 0 A_QuakeEx(1,1,1,3,0,100,"*");
		HAMC I 1 A_WeaponOffset(Random(-2,2),Random(32,34),WOF_INTERPOLATE);
		TNT1 A 0 A_JumpIf(invoker.HamCharge >= 50, 2);
		TNT1 A 0 A_Refire("RightTierTwo");
		Goto MediumRightSwing;
	QuickSwitchSucc:
		TNT1 A 0 {invoker.QuickSwitch = false;}
		TNT1 A 0 {invoker.hamR = true;}
		TNT1 A 0 {invoker.hamL = false;}
		TNT1 A 0 A_QuakeEx(6,6,6,5,0,100,"*");
		TNT1 A 0 A_StartSound("HexShotgunFireAdd2",CHAN_WEAPON,0,.4);
		TNT1 A 0 A_StartSound("HexShotgunShing",CHAN_6,0,1);
		TNT1 A 0 A_StartSound("BFGidle",CHAN_5,CHANF_LOOP,.8);
		TNT1 A 0 A_StartSound("HexShotgunCharge2",CHAN_7,CHANF_LOOP,.7);
	RightTierThree:
		TNT1 A 0 A_QuakeEx(1,1,1,5,0,100,"*");
		HAMC I 1 A_WeaponOffset(Random(-3,3),Random(32,35),WOF_INTERPOLATE);
		TNT1 A 0 A_Refire("RightTierThree");
		Goto BigRightSwing;
		
	SmallRightSwing:
		TNT1 A 0 A_Stopsound(CHAN_7);
		TNT1 A 0 A_Stopsound(CHAN_5);
		TNT1 A 0 A_JumpIf(CountInv("HC_PowerQuadDamage") == 0, 2);
		TNT1 A 0 A_StartSound("QuadDamageShot",0,0,.7);
		TNT1 A 0 A_StartSound("HammerSwing",CHAN_6,0,.6);
		HAMC J 1;
		HAMM FG 1;
		TNT1 A 0 A_FireProjectile("HammerHit",0);
		HAMM HIJ 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"SmallRightHit");
		HAMM R 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"SmallRightHit");
		HAMM S 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"SmallRightHit");
		HAMM T 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"SmallRightHit");
		TNT1 A 5;
		TNT1 A 0 A_TakeInventory("HammerHasHit",1);
		TNT1 A 0 A_Refire("LeftCharge");
		Goto RaiseUp;
	SmallRightHit:
		TNT1 A 0 A_AlertMonsters;
		TNT1 A 0 A_stopsound(CHAN_6);
		TNT1 A 0 A_StartSound("HammerHit",0,0,.6);
		TNT1 A 0 A_Overlay(5,"HitFeel");
		HAMM KKLLLMMNOPQQ 1;
		TNT1 A 0 A_TakeInventory("HammerHasHit",1);
		TNT1 A 5;
		TNT1 A 0 A_Refire("LeftCharge");
		Goto RaiseUp;
		
	MediumRightSwing:
		TNT1 A 0 A_Stopsound(CHAN_7);
		TNT1 A 0 A_Stopsound(CHAN_5);
		TNT1 A 0 A_JumpIf(CountInv("HC_PowerQuadDamage") == 0, 2);
		TNT1 A 0 A_StartSound("QuadDamageShot",0,0,.7);
		TNT1 A 0 A_StartSound("HammerSwing",CHAN_6,0,.6);
		HAMC J 1;
		HAMM FG 1;
		TNT1 A 0 A_FireProjectile("MediumHammerHit",0);
		HAMM HIJ 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"MediumRightHit");
		HAMM R 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"MediumRightHit");
		HAMM S 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"MediumRightHit");
		HAMM T 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"MediumRightHit");
		TNT1 A 5;
		TNT1 A 0 A_TakeInventory("HammerHasHit",1);
		TNT1 A 0 A_Refire("LeftCharge");
		Goto RaiseUp;
	MediumRightHit:
		TNT1 A 0 A_AlertMonsters;
		TNT1 A 0 A_stopsound(CHAN_6);
		TNT1 A 0 A_StartSound("HammerHit",0,0,.6);
		TNT1 A 0 A_Overlay(5,"HitFeel");
		HAMM KKLLLMMNOPQQ 1;
		TNT1 A 0 A_TakeInventory("HammerHasHit",1);
		TNT1 A 5;
		TNT1 A 0 A_Refire("LeftCharge");
		Goto RaiseUp;
		
	BigRightSwing:
		TNT1 A 0 A_Stopsound(CHAN_7);
		TNT1 A 0 A_Stopsound(CHAN_5);
		TNT1 A 0 A_JumpIf(CountInv("HC_PowerQuadDamage") == 0, 2);
		TNT1 A 0 A_StartSound("QuadDamageShot",0,0,.7);
		TNT1 A 0 A_StartSound("HammerSwing",CHAN_5,0,.7);
		HAMC JK 1;
		TNT1 A 0 A_FireProjectile("BigHammerHit",0);
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"BigRightHit");
		HAMC L 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"BigRightHit");
		HAMC M 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"BigRightHit");
		HAMC N 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"BigRightHit");
		HAMC O 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"BigRightHit");
		TNT1 A 10;
		TNT1 A 0 A_refire("LeftCharge");
		Goto RaiseUp;
	BigRightHit:
		TNT1 A 0 A_AlertMonsters;
		TNT1 A 0 A_stopsound(CHAN_6);
		TNT1 A 0 A_StartSound("HammerHit",0,0,.7);
		TNT1 A 0 A_Overlay(5,"AltHitFeel");
		HAMC PPPQQQRRRSTUV 1;
		TNT1 A 0 A_TakeInventory("HammerHasHit",1);
		TNT1 A 5;
		TNT1 A 0 A_refire("LeftCharge");
		Goto RaiseUp;
		
		
		
		
		
	
	LeftCharge:
		TNT1 A 0 A_StartSound("WeaponDraw",CHAN_5,0,.8);
		TNT1 A 0 {invoker.HamCharge = 0;}
		TNT1 A 0 {invoker.hamR = false;}
		TNT1 A 0 {invoker.hamL = true;}
		
		TNT1 A 0 {A_SetPitch(pitch-0.3,SPF_INTERPOLATE);		A_SetAngle(angle+0.2,SPF_INTERPOLATE);}
		HAC2 A 1;
		TNT1 A 0 {A_SetPitch(pitch-0.25,SPF_INTERPOLATE);		A_SetAngle(angle+0.15,SPF_INTERPOLATE);}
		HAC2 B 1;
		TNT1 A 0 {A_SetPitch(pitch-0.2,SPF_INTERPOLATE);		A_SetAngle(angle+0.10,SPF_INTERPOLATE);}
		HAC2 C 1;
		TNT1 A 0 {A_SetPitch(pitch-0.1,SPF_INTERPOLATE);		A_SetAngle(angle+0.05,SPF_INTERPOLATE);}
		HAC2 D 1;
		TNT1 A 0 {A_SetPitch(pitch-0.05,SPF_INTERPOLATE);		A_SetAngle(angle+0.025,SPF_INTERPOLATE);}
		HAC2 E 1;
		TNT1 A 0 {A_SetPitch(pitch+0.05,SPF_INTERPOLATE);		A_SetAngle(angle-0.025,SPF_INTERPOLATE);}
		HAC2 F 1;
		TNT1 A 0 {A_SetPitch(pitch+0.1,SPF_INTERPOLATE);		A_SetAngle(angle-0.05,SPF_INTERPOLATE);}
		HAC2 G 1;
		TNT1 A 0 {A_SetPitch(pitch+0.3,SPF_INTERPOLATE);		A_SetAngle(angle-0.2,SPF_INTERPOLATE);}
		HAC2 H 1;
		TNT1 A 0 {A_SetPitch(pitch+0.40,SPF_INTERPOLATE);		A_SetAngle(angle-0.25,SPF_INTERPOLATE);}
		HAC2 I 1;
		
		TNT1 A 0 A_StartSound("HexShotgunFireAdd2",CHAN_WEAPON,0,.4);
		TNT1 A 0 A_StartSound("BFGidle",CHAN_5,CHANF_LOOP,.8);
		TNT1 A 0 A_StartSound("HexShotgunCharge2",CHAN_7,CHANF_LOOP,.7);
	LeftReady:
		TNT1 A 0 {invoker.HamCharge++;}
		HAC2 I 1 A_WeaponOffset(Random(-1,1),Random(32,33),WOF_INTERPOLATE);
		TNT1 A 0 A_JumpIf(invoker.HamCharge >= 25, 2);
		TNT1 A 0 A_Refire("LeftReady");
		Goto SmallLeftSwing;
		TNT1 A 0 A_QuakeEx(3,3,3,5,0,100,"*");
		TNT1 A 0 A_StartSound("HexShotgunFireAdd2",CHAN_WEAPON,0,.4);
		TNT1 A 0 A_StartSound("HexShotgunShing",CHAN_6,0,0.5);
		TNT1 A 0 A_StartSound("BFGidle",CHAN_5,CHANF_LOOP,.8);
		TNT1 A 0 A_StartSound("HexShotgunCharge2",CHAN_7,CHANF_LOOP,.7);
	LeftTierTwo:	
		TNT1 A 0 {invoker.HamCharge++;}
		TNT1 A 0 A_QuakeEx(1,1,1,3,0,100,"*");
		HAC2 I 1 A_WeaponOffset(Random(-2,2),Random(32,34),WOF_INTERPOLATE);
		TNT1 A 0 A_JumpIf(invoker.HamCharge >= 50, 2);
		TNT1 A 0 A_Refire("LeftTierTwo");
		Goto MediumLeftSwing;
		TNT1 A 0 A_QuakeEx(6,6,6,5,0,100,"*");
		TNT1 A 0 A_StartSound("HexShotgunFireAdd2",CHAN_WEAPON,0,.4);
		TNT1 A 0 A_StartSound("HexShotgunShing",CHAN_6,0,1);
		TNT1 A 0 A_StartSound("BFGidle",CHAN_5,CHANF_LOOP,.8);
		TNT1 A 0 A_StartSound("HexShotgunCharge2",CHAN_7,CHANF_LOOP,.7);
	LeftTierThree:
		TNT1 A 0 A_QuakeEx(1,1,1,5,0,100,"*");
		HAC2 I 1 A_WeaponOffset(Random(-3,3),Random(32,35),WOF_INTERPOLATE);
		TNT1 A 0 A_Refire("LeftTierThree");
		Goto BigLeftSwing;
		
	SmallLeftSwing:
		TNT1 A 0 A_Stopsound(CHAN_7);
		TNT1 A 0 A_Stopsound(CHAN_5);
		TNT1 A 0 A_JumpIf(CountInv("HC_PowerQuadDamage") == 0, 2);
		TNT1 A 0 A_StartSound("QuadDamageShot",0,0,.7);
		TNT1 A 0 A_StartSound("HammerSwing",CHAN_6,0,.6);
		HAC2 J 1;
		HAML FG 1;
		TNT1 A 0 A_FireProjectile("HammerHit",0);
		HAML HIJ 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"SmallLeftHit");
		HAML R 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"SmallLeftHit");
		HAML S 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"SmallLeftHit");
		HAML T 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"SmallLeftHit");
		TNT1 A 5;
		TNT1 A 0 A_TakeInventory("HammerHasHit",1);
		TNT1 A 0 A_Refire("RightCharge");
		Goto RaiseUp;
	SmallLeftHit:
		TNT1 A 0 A_AlertMonsters;
		TNT1 A 0 A_stopsound(CHAN_6);
		TNT1 A 0 A_StartSound("HammerHit",0,0,.6);
		TNT1 A 0 A_Overlay(5,"HitFeel");
		HAML KKLLLMMNOPQQ 1;
		TNT1 A 5;
		TNT1 A 0 A_TakeInventory("HammerHasHit",1);
		TNT1 A 0 A_Refire("RightCharge");
		Goto RaiseUp;
		
	MediumLeftSwing:
		TNT1 A 0 A_Stopsound(CHAN_7);
		TNT1 A 0 A_Stopsound(CHAN_5);
		TNT1 A 0 A_JumpIf(CountInv("HC_PowerQuadDamage") == 0, 2);
		TNT1 A 0 A_StartSound("QuadDamageShot",0,0,.7);
		TNT1 A 0 A_StartSound("HammerSwing",CHAN_6,0,.6);
		HAC2 J 1;
		HAML FG 1;
		TNT1 A 0 A_FireProjectile("MediumHammerHit",0);
		HAML HIJ 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"MediumLeftHit");
		HAML R 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"MediumLeftHit");
		HAML S 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"MediumLeftHit");
		HAML T 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"MediumLeftHit");
		TNT1 A 5;
		TNT1 A 0 A_TakeInventory("HammerHasHit",1);
		TNT1 A 0 A_Refire("RightCharge");
		Goto RaiseUp;
	MediumLeftHit:
		TNT1 A 0 A_AlertMonsters;
		TNT1 A 0 A_stopsound(CHAN_6);
		TNT1 A 0 A_StartSound("HammerHit",0,0,.6);
		TNT1 A 0 A_Overlay(5,"HitFeel");
		HAML KKLLLMMNOPQQ 1;
		TNT1 A 5;
		TNT1 A 0 A_TakeInventory("HammerHasHit",1);
		TNT1 A 0 A_Refire("RightCharge");
		Goto RaiseUp;
		
	BigLeftSwing:
		TNT1 A 0 A_Stopsound(CHAN_7);
		TNT1 A 0 A_Stopsound(CHAN_5);
		TNT1 A 0 A_JumpIf(CountInv("HC_PowerQuadDamage") == 0, 2);
		TNT1 A 0 A_StartSound("QuadDamageShot",0,0,.7);
		TNT1 A 0 A_StartSound("HammerSwing",CHAN_5,0,.7);
		HAC2 JK 1;
		TNT1 A 0 A_FireProjectile("BigHammerHit",0);
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"BigLeftHit");
		HAC2 L 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"BigLeftHit");
		HAC2 M 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"BigLeftHit");
		HAC2 N 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"BigLeftHit");
		HAC2 O 1;
		TNT1 A 0 A_Jumpifinventory("HammerHasHit",0,"BigLeftHit");
		TNT1 A 10;
		TNT1 A 0 A_refire("RightCharge");
		Goto RaiseUp;
	BigLeftHit:
		TNT1 A 0 A_AlertMonsters;
		TNT1 A 0 A_stopsound(CHAN_6);
		TNT1 A 0 A_StartSound("HammerHit",0,0,.7);
		TNT1 A 0 A_Overlay(5,"HitFeel");
		HAC2 PPPQQQRRRSTUV 1;
		TNT1 A 0 A_TakeInventory("HammerHasHit",1);
		TNT1 A 5;
		TNT1 A 0 A_refire("RightCharge");
		Goto RaiseUp;
		
	Reload:		//Sword Inspect
		TNT1 A 0 A_JumpIf(IntroAnim == 0, "Ready");
	
		TNT1 A 0 A_OverlayScale(0,1,1);
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		HAMM D 1 {A_WeaponReady(); A_WeaponOffset(0,32);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		HAMM B 1 {A_WeaponReady(); A_WeaponOffset(0,32);}
		
		TNT1 A 0	{A_OverlayRotate(0,0);																				A_WeaponOffset(0,32);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD A 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,70);							A_WeaponOffset(-50,195);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD A 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,67,WOF_INTERPOLATE);			A_WeaponOffset(-48,191,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD A 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,56,WOF_INTERPOLATE);			A_WeaponOffset(-44,180,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD A 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,46,WOF_INTERPOLATE);			A_WeaponOffset(-34,168,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD A 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,34,WOF_INTERPOLATE);			A_WeaponOffset(-26,143,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD A 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,23,WOF_INTERPOLATE);			A_WeaponOffset(-19,112,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD A 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,15,WOF_INTERPOLATE);			A_WeaponOffset(-10,90,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD A 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,4,WOF_INTERPOLATE);			A_WeaponOffset(-4,56,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD A 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-3,WOF_INTERPOLATE);			A_WeaponOffset(-1,45,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD A 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-5,WOF_INTERPOLATE);			A_WeaponOffset(0,42,WOF_INTERPOLATE);}
		TNT1 A 0 A_StartSound("EnergySword/Deploy",CHAN_6,0,.6);
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD B 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-2);							A_WeaponOffset(-3,51,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-3);							A_WeaponOffset(-2,49,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-5,WOF_INTERPOLATE);			A_WeaponOffset(0,47,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-5,WOF_INTERPOLATE);			A_WeaponOffset(0,44,WOF_INTERPOLATE);}
		
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-5,WOF_INTERPOLATE);			A_WeaponOffset(1,44,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-6,WOF_INTERPOLATE);			A_WeaponOffset(3,45,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-6,WOF_INTERPOLATE);			A_WeaponOffset(4,47,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-7,WOF_INTERPOLATE);			A_WeaponOffset(5,48,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-7,WOF_INTERPOLATE);			A_WeaponOffset(5,50,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-7,WOF_INTERPOLATE);			A_WeaponOffset(5,50,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-8,WOF_INTERPOLATE);			A_WeaponOffset(6,51,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-8,WOF_INTERPOLATE);			A_WeaponOffset(6,51,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-8,WOF_INTERPOLATE);			A_WeaponOffset(6,51,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-8,WOF_INTERPOLATE);			A_WeaponOffset(6,51,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-9,WOF_INTERPOLATE);			A_WeaponOffset(5,51,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-9,WOF_INTERPOLATE);			A_WeaponOffset(5,51,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-9,WOF_INTERPOLATE);			A_WeaponOffset(5,51,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-8,WOF_INTERPOLATE);			A_WeaponOffset(4,51,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-8,WOF_INTERPOLATE);			A_WeaponOffset(4,51,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-7,WOF_INTERPOLATE);			A_WeaponOffset(3,50,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-7,WOF_INTERPOLATE);			A_WeaponOffset(2,50,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-6,WOF_INTERPOLATE);			A_WeaponOffset(1,48,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-6,WOF_INTERPOLATE);			A_WeaponOffset(1,47,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-5,WOF_INTERPOLATE);			A_WeaponOffset(1,45,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-5,WOF_INTERPOLATE);			A_WeaponOffset(0,44,WOF_INTERPOLATE);}
		
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-4,WOF_INTERPOLATE);			A_WeaponOffset(0,44,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,1,WOF_INTERPOLATE);			A_WeaponOffset(0,54,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,7,WOF_INTERPOLATE);			A_WeaponOffset(-1,70,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD C 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,16,WOF_INTERPOLATE);			A_WeaponOffset(-2,80,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD A 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,25,WOF_INTERPOLATE);			A_WeaponOffset(-4,100,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD A 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,30,WOF_INTERPOLATE);			A_WeaponOffset(-20,130,WOF_INTERPOLATE);}
		TNT1 A 0 A_JumpIfInventory("Quick_Melee_Token",1,"DeselectQuickMelee");
		XSWD A 1	{A_WeaponReady(); A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,50,WOF_INTERPOLATE);			A_WeaponOffset(-50,195,WOF_INTERPOLATE);}
		Goto RaiseUp;
	
	Altfire:
		TNT1 A 0 A_StartSound("EnergySword/Deploy",CHAN_6,0,.4);
		TNT1 A 0 A_Overlay(10,"*");
	SwordSwingRight:
		TNT1 A 0 A_OverlayScale(0,1,1);
		TNT1 A 0 A_Jump(256,"SwingRight1","SwingRight2","SwingRight3");
	
	SwingRight1:
		TNT1 A 0 A_StartSound("EnergySword/Swing",0,0,.5);
		XSWD C 1 {A_SetAngle(angle+0.1,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-5);								A_WeaponOffset(120,140);}
		XSWD C 1 {A_SetAngle(angle+0.3,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,5,WOF_INTERPOLATE);				A_WeaponOffset(46,120,WOF_INTERPOLATE);}
		TNT1 A 0 A_CustomPunch(0,FALSE,0, "EnergyBladePuffR", 110,0,0,"ArmorBonus","*");
		TNT1 A 0 A_FireProjectile("EnergyBladeProjectile",0);
		XSWD C 1 {A_SetAngle(angle+0.2,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,10,WOF_INTERPOLATE);				A_WeaponOffset(-75,130,WOF_INTERPOLATE);}
		XSWD C 1 {A_SetAngle(angle-0.6,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,20,WOF_INTERPOLATE);				A_WeaponOffset(-185,200,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		Goto RightStopLower;
	SwingRight2:
		TNT1 A 0 A_StartSound("EnergySword/Swing",0,0,.5);
		XSWD C 1 {A_SetAngle(angle+0.1,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-10);								A_WeaponOffset(100,84);}
		XSWD C 1 {A_SetAngle(angle+0.3,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,20,WOF_INTERPOLATE);				A_WeaponOffset(23,90,WOF_INTERPOLATE);}
		TNT1 A 0 A_CustomPunch(0,FALSE,0, "EnergyBladePuffR", 110,0,0,"ArmorBonus","*");
		TNT1 A 0 A_FireProjectile("EnergyBladeProjectile",0);
		XSWD C 1 {A_SetAngle(angle+0.2,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,50,WOF_INTERPOLATE);				A_WeaponOffset(-45,140,WOF_INTERPOLATE);}
		XSWD C 1 {A_SetAngle(angle-0.6,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,75,WOF_INTERPOLATE);				A_WeaponOffset(-95,200,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		Goto RightStopLower;
	SwingRight3:
		TNT1 A 0 A_StartSound("EnergySword/Swing",0,0,.5);
		XSWD C 1 {A_SetAngle(angle+0.1,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-10);								A_WeaponOffset(30,220);}
		XSWD C 1 {A_SetAngle(angle+0.3,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,5,WOF_INTERPOLATE);				A_WeaponOffset(5,160,WOF_INTERPOLATE);}
		TNT1 A 0 A_CustomPunch(0,FALSE,0, "EnergyBladePuffL", 110,0,0,"ArmorBonus","*");
		TNT1 A 0 A_FireProjectile("EnergyBladeProjectile",0);
		XSWD C 1 {A_SetAngle(angle+0.2,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,10,WOF_INTERPOLATE);				A_WeaponOffset(-125,110,WOF_INTERPOLATE);}
		XSWD C 1 {A_SetAngle(angle-0.6,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,25,WOF_INTERPOLATE);				A_WeaponOffset(-245,104,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		Goto RightStopUpper;
		
	RightStopLower:
		TNT1 A 0 A_Refire("SwordSwingLeft");
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,25);							A_WeaponOffset(-210,100,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,27,WOF_INTERPOLATE);			A_WeaponOffset(-206,105,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,30,WOF_INTERPOLATE);			A_WeaponOffset(-200,114,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,37,WOF_INTERPOLATE);			A_WeaponOffset(-194,134,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		XSWD A 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,44,WOF_INTERPOLATE);			A_WeaponOffset(-180,150,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		XSWD A 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,50,WOF_INTERPOLATE);			A_WeaponOffset(-168,180,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		XSWD A 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,60,WOF_INTERPOLATE);			A_WeaponOffset(-130,195,WOF_INTERPOLATE);}
		Goto RaiseUp;
	RightStopUpper:
		TNT1 A 0 A_Refire("SwordSwingLeft");
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-4);							A_WeaponOffset(-210,64,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,1,WOF_INTERPOLATE);			A_WeaponOffset(-206,74,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,7,WOF_INTERPOLATE);			A_WeaponOffset(-200,90,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,16,WOF_INTERPOLATE);			A_WeaponOffset(-194,100,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		XSWD A 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,25,WOF_INTERPOLATE);			A_WeaponOffset(-180,120,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		XSWD A 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,30,WOF_INTERPOLATE);			A_WeaponOffset(-168,150,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingLeft");
		XSWD A 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,50,WOF_INTERPOLATE);			A_WeaponOffset(-130,215,WOF_INTERPOLATE);}
		Goto RaiseUp;
		
		
	SwordSwingLeft:
		TNT1 A 0 A_OverlayScale(0,1,1);
		TNT1 A 0 A_Jump(256,"SwingLeft1","SwingLeft2","SwingLeft3");
	
	SwingLeft1:
		TNT1 A 0 A_StartSound("EnergySword/Swing",0,0,.5);
		TNT1 A 0 A_OverlayScale(0,-1,1);
		XSWD C 1 {A_SetAngle(angle-0.1,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-5);								A_WeaponOffset(-280,160);}
		XSWD C 1 {A_SetAngle(angle-0.3,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,5,WOF_INTERPOLATE);				A_WeaponOffset(-186,140,WOF_INTERPOLATE);}
		TNT1 A 0 A_CustomPunch(0,FALSE,0, "EnergyBladePuffL", 110,0,0,"ArmorBonus","*");
		TNT1 A 0 A_FireProjectile("EnergyBladeProjectile",0);
		XSWD C 1 {A_SetAngle(angle-0.2,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,10,WOF_INTERPOLATE);				A_WeaponOffset(-65,150,WOF_INTERPOLATE);}
		XSWD C 1 {A_SetAngle(angle+0.6,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,20,WOF_INTERPOLATE);				A_WeaponOffset(45,220,WOF_INTERPOLATE);}
		TNT1 A 0 A_OverlayScale(0,1,1);
		TNT1 A 0 A_Refire("SwordSwingRight");
		Goto LeftStopLower;
	SwingLeft2:
		TNT1 A 0 A_StartSound("EnergySword/Swing",0,0,.5);
		TNT1 A 0 A_OverlayScale(0,-1,1);
		XSWD C 1 {A_SetAngle(angle-0.1,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-10);								A_WeaponOffset(-280,84);}
		XSWD C 1 {A_SetAngle(angle-0.3,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,20,WOF_INTERPOLATE);				A_WeaponOffset(-173,90,WOF_INTERPOLATE);}
		TNT1 A 0 A_CustomPunch(0,FALSE,0, "EnergyBladePuffL", 110,0,0,"ArmorBonus","*");
		TNT1 A 0 A_FireProjectile("EnergyBladeProjectile",0);
		XSWD C 1 {A_SetAngle(angle-0.2,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,50,WOF_INTERPOLATE);				A_WeaponOffset(-105,140,WOF_INTERPOLATE);}
		XSWD C 1 {A_SetAngle(angle+0.6,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,75,WOF_INTERPOLATE);				A_WeaponOffset(-55,200,WOF_INTERPOLATE);}
		TNT1 A 0 A_OverlayScale(0,1,1);
		TNT1 A 0 A_Refire("SwordSwingRight");
		Goto LeftStopLower;
	SwingLeft3:
		TNT1 A 0 A_StartSound("EnergySword/Swing",0,0,.5);
		TNT1 A 0 A_OverlayScale(0,-1,1);
		XSWD C 1 {A_SetAngle(angle-0.1,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-10);								A_WeaponOffset(-230,220);}
		XSWD C 1 {A_SetAngle(angle-0.3,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,5,WOF_INTERPOLATE);				A_WeaponOffset(-205,160,WOF_INTERPOLATE);}
		TNT1 A 0 A_CustomPunch(0,FALSE,0, "EnergyBladePuffR", 110,0,0,"ArmorBonus","*");
		TNT1 A 0 A_FireProjectile("EnergyBladeProjectile",0);
		XSWD C 1 {A_SetAngle(angle-0.2,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,10,WOF_INTERPOLATE);				A_WeaponOffset(-75,110,WOF_INTERPOLATE);}
		XSWD C 1 {A_SetAngle(angle+0.6,SPF_INTERPOLATE);	A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,25,WOF_INTERPOLATE);				A_WeaponOffset(45,104,WOF_INTERPOLATE);}
		TNT1 A 0 A_OverlayScale(0,1,1);
		TNT1 A 0 A_Refire("SwordSwingRight");
		Goto LeftStopUpper;
		
	LeftStopUpper:
		TNT1 A 0 A_Refire("SwordSwingRight");
		TNT1 A 0 A_OverlayScale(0,-1,1);
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,-4);							A_WeaponOffset(0,64,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingRight");
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,1,WOF_INTERPOLATE);			A_WeaponOffset(0,74,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingRight");
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,7,WOF_INTERPOLATE);			A_WeaponOffset(1,90,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingRight");
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,16,WOF_INTERPOLATE);			A_WeaponOffset(2,100,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingRight");
		XSWD A 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,25,WOF_INTERPOLATE);			A_WeaponOffset(4,120,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingRight");
		XSWD A 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,30,WOF_INTERPOLATE);			A_WeaponOffset(20,150,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingRight");
		XSWD A 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,50,WOF_INTERPOLATE);			A_WeaponOffset(50,215,WOF_INTERPOLATE);}
		TNT1 A 0 A_OverlayScale(0,1,1);
		Goto RaiseUp;
	LeftStopLower:
		TNT1 A 0 A_Refire("SwordSwingRight");
		TNT1 A 0 A_OverlayScale(0,-1,1);
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,25);							A_WeaponOffset(0,104,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingRight");
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,28,WOF_INTERPOLATE);			A_WeaponOffset(0,110,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingRight");
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,32,WOF_INTERPOLATE);			A_WeaponOffset(1,123,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingRight");
		XSWD C 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,38,WOF_INTERPOLATE);			A_WeaponOffset(2,132,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingRight");
		XSWD A 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,45,WOF_INTERPOLATE);			A_WeaponOffset(4,140,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingRight");
		XSWD A 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,50,WOF_INTERPOLATE);			A_WeaponOffset(20,180,WOF_INTERPOLATE);}
		TNT1 A 0 A_Refire("SwordSwingRight");
		XSWD A 1	{A_OverlayPivotAlign(0,PSPA_CENTER,PSPA_CENTER);	A_OverlayRotate(0,60,WOF_INTERPOLATE);			A_WeaponOffset(50,215,WOF_INTERPOLATE);}
		TNT1 A 0 A_OverlayScale(0,1,1);
		Goto RaiseUp;
		
	Spawn:
		HAMM A -1;
		Stop;
  }
}

//////////////////////////////////////HAMMER PRJECTILES

Class HammerHit: FastProjectile
{
	Default {
	Radius 12;
	Height 3;
	
	RenderStyle "Add";
	Alpha 0.75;
	
    DamageFunction 450; //100;
    Speed 48;//30;
	
	SeeSound "none";
	DeathSound "none";
	Decal "BFGLightning";
	
	Projectile;
	+NODECAL
	+FORCEXYBILLBOARD
	+EXTREMEDEATH
	+ZDOOMTRANS
	}
	States
	{
	Spawn:
		TNT1 A 0;
        TNT1 A 1;
		Stop;
		
	Death:
	XDEath:
			TNT1 A 0 A_GiveInventory("HammerHasHit", 1,AAPTR_PLAYER1);
			TNT1 A 0 Radius_Quake (2, 6, 0, 5, 0);//(intensity, duration, damrad, tremrad, tid)
			TNT1 A 0 A_StartSound("BFGballexplode",CHAN_5,0,1);
			TNT1 A 0 A_StartSound("BFGballexplodeadd",CHAN_6,0,1);
			TNT1 A 0 A_Explode(128,0,0);
			
			TNT1 A 0 A_SpawnItemEx("BFGBigSparkle",random(-100,100),random(-100,100),random(-100,100));
			TNT1 AA 0 A_SpawnItemEx("BFGSmallSparkle",random(-125,125),random(-125,125),random(-125,125));
			TNT1 AAA 0 A_SpawnItemEx("BFGMiniSparkle",random(-150,150),random(-150,150),random(-150,150),random(-15,15),random(-15,15),random(-15,15));
			
			TNT1 A 0
			{
				for (int i = random(10,20); i > 0; i--)
				{
					A_SpawnItemEx("RocketSmokeTrail",0,0,0,frandom(-20,20),frandom(-20,20),frandom(-20,20));
				}
			}
			
			TNT1 A 0
			{
				for (int i = random(1,3); i > 0; i--)
				{
					A_SpawnItemEx("ExplosiveDebris",0,0,0,frandom(-30,30),frandom(-30,30),frandom(-30,30));
				}
			}
			
			TNT1 A 0
			{
				for (int i = random(1,3); i > 0; i--)
				{
					A_SpawnItemEx("ExplosionShockWave",0,0,0,0,0,0);
				}
			}
		
			BFE1 ABCCDDEEE 1 BRIGHT;
		Stop;
	}
}

Class MediumHammerHit: FastProjectile
{
	Default {
	Radius 12;
	Height 3;
	
	RenderStyle "Add";
	Alpha 0.75;
	
    DamageFunction 900; //100;
    Speed 48;//30;
	
	SeeSound "none";
	DeathSound "none";
	Decal "BFGLightning";
	
	Projectile;
	+NODECAL
	+FORCEXYBILLBOARD
	+EXTREMEDEATH
	+ZDOOMTRANS
	}
	States
	{
	Spawn:
		TNT1 A 0;
        TNT1 A 1;
		Stop;
		
	Death:
	XDEath:
			TNT1 A 0 A_GiveInventory("HammerHasHit", 1,AAPTR_PLAYER1);
			TNT1 A 0 Radius_Quake (2, 6, 0, 5, 0);//(intensity, duration, damrad, tremrad, tid)
			TNT1 A 0 A_StartSound("BFGballexplode",CHAN_5,0,1);
			TNT1 A 0 A_StartSound("BFGballexplodeadd",CHAN_6,0,1);
			TNT1 A 0 A_Explode(256,0,0);
			TNT1 A 0 A_SpawnItemEx("BFGSFX");
			TNT1 AAA 0 A_SpawnItemEx("BFGBigSparkle",random(-100,100),random(-100,100),random(-100,100));
			TNT1 AAAAA 0 A_SpawnItemEx("BFGSmallSparkle",random(-125,125),random(-125,125),random(-125,125));
			TNT1 AAAAAAA 0 A_SpawnItemEx("BFGMiniSparkle",random(-150,150),random(-150,150),random(-150,150),random(-15,15),random(-15,15),random(-15,15));
			TNT1 A 0 A_SpawnItemEx("BIGExplosionShockWave",0,0,0,0,0,0);
			TNT1 A 0
			{
				for (int i = random(10,20); i > 0; i--)
				{
					A_SpawnItemEx("RocketSmokeTrail",0,0,0,frandom(-20,20),frandom(-20,20),frandom(-20,20));
				}
			}
			TNT1 A 0
			{
				for (int i = random(3,10); i > 0; i--)
				{
					A_SpawnItemEx("ExplosiveDebris",0,0,0,frandom(-30,30),frandom(-30,30),frandom(-30,30));
				}
			}
			TNT1 A 0
			{
				for (int i = random(1,3); i > 0; i--)
				{
					A_SpawnItemEx("ExplosionShockWave",0,0,0,0,0,0);
				}
			}
			BFE1 ABCCDDEEE 1 BRIGHT;
		Stop;
	}
}


Class BigHammerHit: FastProjectile
{
	Default {
	Radius 12;
	Height 3;
	
	RenderStyle "Add";
	Alpha 0.75;
	
    DamageFunction 1350; //100;
    Speed 48;//30;
	
	SeeSound "none";
	DeathSound "none";
	Decal "BFGLightning";
	
	Projectile;
	+NODECAL
	+FORCEXYBILLBOARD
	+EXTREMEDEATH
	+ZDOOMTRANS
	}
	States
	{
	Spawn:
		TNT1 A 0;
        TNT1 A 1;
		Stop;
		
	Death:
	XDEath:
			TNT1 A 0 A_GiveInventory("HammerHasHit", 1,AAPTR_PLAYER1);
			TNT1 A 0 Radius_Quake (2, 6, 0, 5, 0);//(intensity, duration, damrad, tremrad, tid)
			TNT1 A 0 A_StartSound("BFGballexplode",CHAN_5,0,1);
			TNT1 A 0 A_StartSound("BFGballexplodeadd",CHAN_6,0,1);
			TNT1 A 0 A_StartSound("BFGBall/Explode/Distant",CHAN_7,0,1);
			TNT1 A 0 A_Explode(384,200,0);
			TNT1 A 0 A_SpawnItemEx("BFGSFX");
			TNT1 AAAAA 0 A_SpawnItemEx("BFGBigSparkle",random(-200,200),random(-200,200),random(-200,200));
			TNT1 AAAAAAA 0 A_SpawnItemEx("BFGSmallSparkle",random(-225,225),random(-225,225),random(-225,225));
			TNT1 AAAAAAAAA 0 A_SpawnItemEx("BFGMiniSparkle",random(-350,350),random(-350,350),random(-350,350),random(-15,15),random(-15,15),random(-15,15));
			TNT1 A 0
			{
				for (int i = random(10,20); i > 0; i--)
				{
					A_SpawnItemEx("RocketSmokeTrail",0,0,0,frandom(-20,20),frandom(-20,20),frandom(-20,20));
				}
			}
			TNT1 A 0
			{
				for (int i = random(3,10); i > 0; i--)
				{
					A_SpawnItemEx("ExplosiveDebris",0,0,0,frandom(-30,30),frandom(-30,30),frandom(-30,30));
				}
			}
			TNT1 A 0
			{
				for (int i = random(2,3); i > 0; i--)
				{
					A_SpawnItemEx("BIGExplosionShockWave",0,0,0,0,0,0);
				}
			}
			BFE1 ABCCD 1 BRIGHT;
			TNT1 A 0 A_SpawnItemEx("MiniHammerHitSpawner",0,0,0,25,0,0,20);
			TNT1 A 0 A_SpawnItemEx("MiniHammerHitSpawner",0,0,0,25);
			TNT1 A 0 A_SpawnItemEx("MiniHammerHitSpawner",0,0,0,25,0,0,-20);
			/*
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",100,25);
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",100);
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",100,-25);
			*/
			BFE1 DEEE 1 BRIGHT;
			/*
			TNT1 A 1;
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",200,50);
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",200);
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",200,-50);
			TNT1 A 5;
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",300,75);
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",300);
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",300,-75);
			TNT1 A 5;
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",400,100);
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",400);
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",400,-100);
			TNT1 A 5;
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",500,125);
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",500);
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",500,-125);
			TNT1 A 5;
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",600,150);
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",600);
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",600,-150);
			TNT1 A 5;
			*/
		Stop;
	}
}

Class MiniHammerHitSpawner: actor
{
	Default	{
		Radius 2;
		Height 25;
		Speed 20;
		Damage 0;
		
		-NOGRAVITY
		+FLOORHUGGER
		+THRUGHOST
		+DONTSPLASH
		+Ripper
		Projectile;
	}
	States	{
		Spawn:
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",0);
			TNT1 A 5;
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",0);
			TNT1 A 5;
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",0);
			TNT1 A 5;
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",0);
			TNT1 A 5;
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",0);
			TNT1 A 5;
			TNT1 A 0 A_SpawnItemEx("MiniHammerHit",0);
			TNT1 A 5;
			Stop;
		
		Death:
		XDEath:
			TNT1 A 1;
			Stop;
	}
}

Class MiniHammerHit: Actor
{
	Default {
	Radius 20;	//12
	Height 20;	//3
	
	RenderStyle "Add";
	Alpha 0.75;
	
    DamageFunction 450; //100;
    Speed 30;
	
	SeeSound "none";
	DeathSound "none";
	Decal "BFGLightning";
	
	+NODECAL
	+FORCEXYBILLBOARD
	+EXTREMEDEATH
	+ZDOOMTRANS
	}
	States
	{
		Spawn:
			TNT1 A 0 A_GiveInventory("HammerHasHit", 1,AAPTR_PLAYER1);
			TNT1 A 0 Radius_Quake (2, 6, 0, 5, 0);//(intensity, duration, damrad, tremrad, tid)
			//TNT1 A 0 A_StartSound("BFGballexplode",CHAN_5,0,1);
			TNT1 A 0 A_StartSound("BFGballexplodeadd",CHAN_6,0,0.5);
			TNT1 A 0 A_Explode(128,0,0);
			
			TNT1 A 0 A_SpawnItemEx("BFGBigSparkle",random(-100,100),random(-100,100),random(-100,100));
			TNT1 AA 0 A_SpawnItemEx("BFGSmallSparkle",random(-125,125),random(-125,125),random(-125,125));
			TNT1 AAA 0 A_SpawnItemEx("BFGMiniSparkle",random(-150,150),random(-150,150),random(-150,150),random(-15,15),random(-15,15),random(-15,15));
			
			TNT1 A 0
			{
				for (int i = random(10,20); i > 0; i--)
				{
					A_SpawnItemEx("RocketSmokeTrail",0,0,0,frandom(-20,20),frandom(-20,20),frandom(-20,20));
				}
			}
			
			TNT1 A 0
			{
				for (int i = random(1,3); i > 0; i--)
				{
					A_SpawnItemEx("ExplosiveDebris",0,0,0,frandom(-30,30),frandom(-30,30),frandom(-30,30));
				}
			}
			
			BFE1 ABCCDDEEE 1 BRIGHT;
		Stop;
	}
}

//////////////////////////////////////Blade PRJECTILES

Class EnergyBladePuffR : EnergyBladePuffL
{	
	Default
	{
	Decal "RightEnergyBladeCut";
	}
}

Class EnergyBladePuffL : Actor
{	
	Default
	{
	Decal "LeftEnergyBladeCut";
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	}
}

Class EnergyBladeProjectile: FastProjectile
{
	Default {
	Radius 10;
	Height 3;
	
    DamageFunction 135; //30;
	
    Speed 44;//40;//35;
	//ProjectileKickback 250;
	
	SeeSound "none";
	DeathSound "none";
	DamageType "EnergyBlade";
	
	Projectile;
	+FORCEXYBILLBOARD;
	+NODECAL;
	}
	States
	{
	Spawn:
		TNT1 A 0;
        TNT1 A 1;
		Stop;
		
	Death:
		TNT1 A 0;
		TNT1 A 0 A_QuakeEx(1,1,1,8,0,100,"*");
		TNT1 A 0 A_StartSound("EnergySword/hit",CHAN_5,CHANF_OVERLAP,.6);
		TNT1 A 100;
		Stop;
	
	XDeath:
		TNT1 A 0;
		TNT1 A 0 A_QuakeEx(1,1,1,8,0,100,"*");
		TNT1 A 0 A_StartSound("EnergySword/hit",CHAN_5,CHANF_OVERLAP,.6);
		TNT1 A 0 A_StartSound("Crucible/MeatChop",CHAN_6,CHANF_OVERLAP,.7);
		TNT1 A 100;
		Stop;
	}
}